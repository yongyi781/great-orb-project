var ActionType;
(function (ActionType) {
    ActionType[ActionType["Idle"] = 0] = "Idle";
    ActionType[ActionType["Move"] = 1] = "Move";
    ActionType[ActionType["Attract"] = 2] = "Attract";
})(ActionType || (ActionType = {}));
var PathMode;
(function (PathMode) {
    PathMode[PathMode["Sight"] = 0] = "Sight";
    PathMode[PathMode["Orb"] = 1] = "Orb";
    PathMode[PathMode["Player"] = 2] = "Player";
})(PathMode || (PathMode = {}));
var OrbControlState;
(function (OrbControlState) {
    OrbControlState[OrbControlState["Free"] = 0] = "Free";
    OrbControlState[OrbControlState["Controlled"] = 1] = "Controlled";
    OrbControlState[OrbControlState["Wait1"] = 2] = "Wait1";
    OrbControlState[OrbControlState["Wait2"] = 3] = "Wait2";
})(OrbControlState || (OrbControlState = {}));
var Altar;
(function (Altar) {
    Altar[Altar["None"] = 0] = "None";
    Altar[Altar["Air"] = 1] = "Air";
    Altar[Altar["Mind"] = 2] = "Mind";
    Altar[Altar["Water"] = 3] = "Water";
    Altar[Altar["Earth"] = 4] = "Earth";
    Altar[Altar["Fire"] = 5] = "Fire";
    Altar[Altar["Body"] = 6] = "Body";
})(Altar || (Altar = {}));
var Tile;
(function (Tile) {
    Tile[Tile["Floor"] = 0] = "Floor";
    Tile[Tile["Barrier"] = 1] = "Barrier";
    Tile[Tile["Rock"] = 2] = "Rock";
    Tile[Tile["Water"] = 3] = "Water";
    Tile[Tile["WallW"] = 4] = "WallW";
    Tile[Tile["WallS"] = 5] = "WallS";
    Tile[Tile["WallSW"] = 6] = "WallSW";
    Tile[Tile["Minipillar1"] = 7] = "Minipillar1";
    Tile[Tile["Minipillar2"] = 8] = "Minipillar2";
})(Tile || (Tile = {}));

var Point = (function () {
    /**
     * Constructs a 2D point.
     * @param {Number} x The x-coordinate.
     * @param {Number} y The y-coordinate.
     */
    function Point(x, y) {
        this.x = x;
        this.y = y;
    }
    Point.prototype.add = function (other) { return new Point(this.x + other.x, this.y + other.y); };
    Point.prototype.subtract = function (other) { return new Point(this.x - other.x, this.y - other.y); };
    Point.prototype.multiply = function (scalar) { return new Point(scalar * this.x, scalar * this.y); };
    Point.prototype.negate = function () { return new Point(-this.x, -this.y); };
    Point.prototype.equals = function (other) { return this.x === other.x && this.y === other.y; };
    Point.prototype.clone = function () { return new Point(this.x, this.y); };
    Point.prototype.compare = function (other) { return this.y === other.y ? (this.x === other.x ? 0 : this.x < other.x ? -1 : 1) : this.y < other.y ? -1 : 1; };
    Point.prototype.toString = function () { return "(" + this.x + "," + this.y + ")"; };
    /**
     * Returns whether a point represents NaN.
     * @param {Point} point the point.
     * @returns {Boolean}
     */
    Point.isNaN = function (point) { return point === void 0 || isNaN(point.x) || isNaN(point.y); };
    /**
      * Returns the squared distance from this point to another.
      * @param {Point} left A point.
      * @param {Point} right A point.
      * @returns {Number}
      */
    Point.distanceSquared = function (left, right) {
        var dx = left.x - right.x;
        var dy = left.y - right.y;
        return dx * dx + dy * dy;
    };
    Point.walkingDistance = function (left, right) {
        return Math.max(Math.abs(left.x - right.x), Math.abs(left.y - right.y));
    };
    Point.lerp = function (left, right, t) {
        if (Point.isNaN(left))
            return right;
        if (Point.isNaN(right))
            return left;
        return new Point((1 - t) * left.x + t * right.x, (1 - t) * left.y + t * right.y);
    };
    Point.parse = function (str) {
        if (str[0] === "(" || str[0] === "[")
            str = str.substring(1, str.length - 1);
        var arr = str.split(",", 2);
        return new Point(parseInt(arr[0], 10), parseInt(arr[1], 10));
    };
    Point.zero = new Point(0, 0);
    Point.NaN = new Point(NaN, NaN);
    Point.gridOffsets = [
        new Point(-1, 0), new Point(1, 0), new Point(0, -1), new Point(0, 1),
        new Point(-1, -1), new Point(-1, 1), new Point(1, -1), new Point(1, 1)
    ];
    return Point;
})();

var MersenneTwister = (function () {
    function MersenneTwister(seed) {
        if (seed === void 0) { seed = 5489; }
        this.seed = seed;
        this.N = 624;
        this.M = 397;
        this.MATRIX_A = 0x9908b0df; /* constant vector a */
        this.UPPER_MASK = 0x80000000; /* most significant w-r bits */
        this.LOWER_MASK = 0x7fffffff; /* least significant r bits */
        this.mt = new Array(this.N); /* the array for the state vector */
        this.mti = this.N + 1; /* mti==N+1 means mt[N] is not initialized */
        this.init_genrand(seed);
    }
    /**
     * Initializes mt[N] with a seed
     */
    MersenneTwister.prototype.init_genrand = function (s) {
        this.mt[0] = s >>> 0;
        for (this.mti = 1; this.mti < this.N; this.mti++) {
            s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);
            this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253) + this.mti;
            this.mt[this.mti] >>>= 0;
        }
    };
    MersenneTwister.prototype.init_by_array = function (init_key, key_length) {
        var i, j, k, s;
        this.init_genrand(19650218);
        i = 1;
        j = 0;
        k = (this.N > key_length ? this.N : key_length);
        for (; k; k--) {
            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525))) + init_key[j] + j; /* non linear */
            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
            i++;
            j++;
            if (i >= this.N) {
                this.mt[0] = this.mt[this.N - 1];
                i = 1;
            }
            if (j >= key_length)
                j = 0;
        }
        for (k = this.N - 1; k; k--) {
            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941)) - i; /* non linear */
            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
            i++;
            if (i >= this.N) {
                this.mt[0] = this.mt[this.N - 1];
                i = 1;
            }
        }
        this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
    };
    /**
     * Generates a random number on [0,0xffffffff]-interval
     */
    MersenneTwister.prototype.genrand_int32 = function () {
        var y;
        var mag01 = new Array(0x0, this.MATRIX_A);
        /* mag01[x] = x * MATRIX_A  for x=0,1 */
        if (this.mti >= this.N) {
            var kk;
            if (this.mti === this.N + 1)
                this.init_genrand(5489); /* a default initial seed is used */
            for (kk = 0; kk < this.N - this.M; kk++) {
                y = (this.mt[kk] & this.UPPER_MASK) | (this.mt[kk + 1] & this.LOWER_MASK);
                this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];
            }
            for (; kk < this.N - 1; kk++) {
                y = (this.mt[kk] & this.UPPER_MASK) | (this.mt[kk + 1] & this.LOWER_MASK);
                this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];
            }
            y = (this.mt[this.N - 1] & this.UPPER_MASK) | (this.mt[0] & this.LOWER_MASK);
            this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];
            this.mti = 0;
        }
        y = this.mt[this.mti++];
        /* Tempering */
        y ^= (y >>> 11);
        y ^= (y << 7) & 0x9d2c5680;
        y ^= (y << 15) & 0xefc60000;
        y ^= (y >>> 18);
        return y >>> 0;
    };
    /**
     * Generates a random integer in the range [0, maxValue).
     * @param maxValue The exclusive upper bound for the random number.
     */
    MersenneTwister.prototype.nextInt = function (maxValue) {
        while (true) {
            var ret = this.genrand_int32();
            if (Math.floor(ret / maxValue) < Math.floor(4294967295 / maxValue) || 4294967295 % maxValue === maxValue - 1)
                return ret % maxValue;
        }
    };
    return MersenneTwister;
})();

var AltarData = [
    {
        name: "none",
        grid: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        spawns: [new Point(-2, 4)]
    },
    {
        name: "air",
        grid: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        spawns: [new Point(-5, -9), new Point(-4, -9), new Point(-3, -9), new Point(-2, -9), new Point(-1, -9), new Point(0, -9), new Point(-6, -8), new Point(-5, -8), new Point(-4, -8), new Point(-3, -8), new Point(-2, -8), new Point(-1, -8), new Point(0, -8), new Point(1, -8), new Point(2, -8), new Point(3, -8), new Point(-6, -7), new Point(-5, -7), new Point(-4, -7), new Point(-3, -7), new Point(-2, -7), new Point(-1, -7), new Point(0, -7), new Point(1, -7), new Point(2, -7), new Point(3, -7), new Point(4, -7), new Point(5, -7), new Point(6, -7), new Point(-6, -6), new Point(-5, -6), new Point(-4, -6), new Point(-2, -6), new Point(-1, -6), new Point(0, -6), new Point(1, -6), new Point(2, -6), new Point(3, -6), new Point(4, -6), new Point(5, -6), new Point(6, -6), new Point(7, -6), new Point(-6, -5), new Point(-5, -5), new Point(-4, -5), new Point(-3, -5), new Point(-2, -5), new Point(-1, -5), new Point(0, -5), new Point(1, -5), new Point(2, -5), new Point(3, -5), new Point(4, -5), new Point(5, -5), new Point(6, -5), new Point(7, -5), new Point(-7, -4), new Point(-6, -4), new Point(-5, -4), new Point(-4, -4), new Point(-3, -4), new Point(-2, -4), new Point(2, -4), new Point(3, -4), new Point(4, -4), new Point(5, -4), new Point(6, -4), new Point(7, -4), new Point(-8, -3), new Point(-7, -3), new Point(-6, -3), new Point(-5, -3), new Point(-4, -3), new Point(4, -3), new Point(5, -3), new Point(6, -3), new Point(7, -3), new Point(-8, -2), new Point(-7, -2), new Point(-6, -2), new Point(-5, -2), new Point(-4, -2), new Point(4, -2), new Point(5, -2), new Point(6, -2), new Point(7, -2), new Point(-8, -1), new Point(-7, -1), new Point(-6, -1), new Point(-5, -1), new Point(5, -1), new Point(6, -1), new Point(7, -1), new Point(-8, 0), new Point(-7, 0), new Point(-6, 0), new Point(-5, 0), new Point(5, 0), new Point(6, 0), new Point(7, 0), new Point(-8, 1), new Point(-7, 1), new Point(-6, 1), new Point(-5, 1), new Point(5, 1), new Point(6, 1), new Point(7, 1), new Point(-8, 2), new Point(-7, 2), new Point(-6, 2), new Point(-5, 2), new Point(-4, 2), new Point(4, 2), new Point(5, 2), new Point(6, 2), new Point(7, 2), new Point(-8, 3), new Point(-7, 3), new Point(-6, 3), new Point(-5, 3), new Point(-4, 3), new Point(4, 3), new Point(5, 3), new Point(6, 3), new Point(7, 3), new Point(-7, 4), new Point(-6, 4), new Point(-5, 4), new Point(-4, 4), new Point(-3, 4), new Point(-2, 4), new Point(2, 4), new Point(3, 4), new Point(4, 4), new Point(5, 4), new Point(6, 4), new Point(7, 4), new Point(-7, 5), new Point(-6, 5), new Point(-5, 5), new Point(-4, 5), new Point(-3, 5), new Point(-2, 5), new Point(-1, 5), new Point(0, 5), new Point(1, 5), new Point(2, 5), new Point(3, 5), new Point(4, 5), new Point(5, 5), new Point(6, 5), new Point(7, 5), new Point(-6, 6), new Point(-5, 6), new Point(-4, 6), new Point(-3, 6), new Point(-2, 6), new Point(-1, 6), new Point(0, 6), new Point(1, 6), new Point(2, 6), new Point(3, 6), new Point(4, 6), new Point(5, 6), new Point(6, 6), new Point(7, 6), new Point(-6, 7), new Point(-5, 7), new Point(-4, 7), new Point(-3, 7), new Point(-2, 7), new Point(-1, 7), new Point(0, 7), new Point(1, 7), new Point(2, 7), new Point(3, 7), new Point(4, 7), new Point(5, 7), new Point(6, 7), new Point(-5, 8), new Point(-4, 8), new Point(-3, 8), new Point(-2, 8), new Point(-1, 8), new Point(0, 8), new Point(1, 8), new Point(2, 8), new Point(3, 8), new Point(4, 8), new Point(5, 8)]
    },
    {
        name: "mind",
        grid: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 8, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 5, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 0, 0, 0, 7, 0, 0, 0, 7, 5, 5, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 6, 5, 5, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 4, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 1, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 5, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 5, 5, 4, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 7, 0, 0, 0, 4, 0, 8, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 5, 4, 0, 0, 0, 0, 0, 8, 6, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 5, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 0, 5, 0, 7, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 1, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 4, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 0, 0, 0, 0, 1, 0, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        spawns: [new Point(-4, -16), new Point(-3, -16), new Point(-2, -16), new Point(-1, -16), new Point(0, -16), new Point(1, -16), new Point(2, -16), new Point(3, -16), new Point(4, -16), new Point(5, -16), new Point(6, -16), new Point(7, -16), new Point(8, -16), new Point(9, -16), new Point(10, -16), new Point(11, -16), new Point(13, -16), new Point(-3, -15), new Point(-2, -15), new Point(-1, -15), new Point(0, -15), new Point(1, -15), new Point(2, -15), new Point(3, -15), new Point(4, -15), new Point(5, -15), new Point(6, -15), new Point(7, -15), new Point(8, -15), new Point(9, -15), new Point(10, -15), new Point(12, -15), new Point(13, -15), new Point(-4, -14), new Point(-3, -14), new Point(-2, -14), new Point(-1, -14), new Point(0, -14), new Point(1, -14), new Point(2, -14), new Point(3, -14), new Point(4, -14), new Point(5, -14), new Point(6, -14), new Point(8, -14), new Point(9, -14), new Point(10, -14), new Point(11, -14), new Point(12, -14), new Point(13, -14), new Point(-4, -13), new Point(-3, -13), new Point(-2, -13), new Point(-1, -13), new Point(0, -13), new Point(1, -13), new Point(2, -13), new Point(3, -13), new Point(4, -13), new Point(5, -13), new Point(6, -13), new Point(7, -13), new Point(8, -13), new Point(9, -13), new Point(10, -13), new Point(11, -13), new Point(12, -13), new Point(13, -13), new Point(-6, -12), new Point(-5, -12), new Point(-4, -12), new Point(-3, -12), new Point(-2, -12), new Point(-1, -12), new Point(0, -12), new Point(1, -12), new Point(2, -12), new Point(3, -12), new Point(4, -12), new Point(5, -12), new Point(6, -12), new Point(7, -12), new Point(8, -12), new Point(9, -12), new Point(10, -12), new Point(11, -12), new Point(12, -12), new Point(-6, -11), new Point(-5, -11), new Point(-4, -11), new Point(-3, -11), new Point(-2, -11), new Point(-1, -11), new Point(0, -11), new Point(1, -11), new Point(2, -11), new Point(3, -11), new Point(4, -11), new Point(5, -11), new Point(6, -11), new Point(7, -11), new Point(8, -11), new Point(9, -11), new Point(10, -11), new Point(11, -11), new Point(12, -11), new Point(13, -11), new Point(-13, -10), new Point(-12, -10), new Point(-10, -10), new Point(-9, -10), new Point(-7, -10), new Point(-6, -10), new Point(-5, -10), new Point(-4, -10), new Point(-3, -10), new Point(-2, -10), new Point(0, -10), new Point(2, -10), new Point(3, -10), new Point(4, -10), new Point(5, -10), new Point(6, -10), new Point(7, -10), new Point(8, -10), new Point(9, -10), new Point(10, -10), new Point(11, -10), new Point(12, -10), new Point(13, -10), new Point(14, -10), new Point(-14, -9), new Point(-13, -9), new Point(-12, -9), new Point(-11, -9), new Point(-10, -9), new Point(-9, -9), new Point(-8, -9), new Point(-7, -9), new Point(-6, -9), new Point(-5, -9), new Point(-4, -9), new Point(-3, -9), new Point(-2, -9), new Point(-1, -9), new Point(0, -9), new Point(1, -9), new Point(2, -9), new Point(3, -9), new Point(4, -9), new Point(5, -9), new Point(6, -9), new Point(7, -9), new Point(8, -9), new Point(9, -9), new Point(10, -9), new Point(11, -9), new Point(12, -9), new Point(13, -9), new Point(14, -9), new Point(15, -9), new Point(-15, -8), new Point(-14, -8), new Point(-13, -8), new Point(-12, -8), new Point(-11, -8), new Point(-10, -8), new Point(-9, -8), new Point(-8, -8), new Point(-7, -8), new Point(-6, -8), new Point(-5, -8), new Point(-4, -8), new Point(-3, -8), new Point(-2, -8), new Point(-1, -8), new Point(0, -8), new Point(1, -8), new Point(2, -8), new Point(3, -8), new Point(4, -8), new Point(5, -8), new Point(6, -8), new Point(7, -8), new Point(8, -8), new Point(9, -8), new Point(10, -8), new Point(11, -8), new Point(12, -8), new Point(13, -8), new Point(14, -8), new Point(15, -8), new Point(-16, -7), new Point(-15, -7), new Point(-14, -7), new Point(-13, -7), new Point(-12, -7), new Point(-11, -7), new Point(-10, -7), new Point(-9, -7), new Point(-8, -7), new Point(-7, -7), new Point(6, -7), new Point(7, -7), new Point(8, -7), new Point(9, -7), new Point(10, -7), new Point(11, -7), new Point(12, -7), new Point(13, -7), new Point(14, -7), new Point(15, -7), new Point(-16, -6), new Point(-15, -6), new Point(-14, -6), new Point(-13, -6), new Point(-12, -6), new Point(-11, -6), new Point(-10, -6), new Point(-9, -6), new Point(-8, -6), new Point(7, -6), new Point(8, -6), new Point(9, -6), new Point(10, -6), new Point(11, -6), new Point(12, -6), new Point(13, -6), new Point(14, -6), new Point(15, -6), new Point(-16, -5), new Point(-15, -5), new Point(-14, -5), new Point(-13, -5), new Point(-12, -5), new Point(-11, -5), new Point(-10, -5), new Point(-9, -5), new Point(8, -5), new Point(9, -5), new Point(10, -5), new Point(11, -5), new Point(12, -5), new Point(13, -5), new Point(14, -5), new Point(15, -5), new Point(-16, -4), new Point(-15, -4), new Point(-14, -4), new Point(-13, -4), new Point(-12, -4), new Point(-11, -4), new Point(-10, -4), new Point(8, -4), new Point(9, -4), new Point(10, -4), new Point(11, -4), new Point(13, -4), new Point(14, -4), new Point(-16, -3), new Point(-15, -3), new Point(-14, -3), new Point(-13, -3), new Point(-12, -3), new Point(-11, -3), new Point(-10, -3), new Point(8, -3), new Point(9, -3), new Point(10, -3), new Point(11, -3), new Point(12, -3), new Point(13, -3), new Point(14, -3), new Point(15, -3), new Point(-16, -2), new Point(-15, -2), new Point(-14, -2), new Point(-13, -2), new Point(-12, -2), new Point(-11, -2), new Point(-10, -2), new Point(8, -2), new Point(9, -2), new Point(10, -2), new Point(11, -2), new Point(12, -2), new Point(13, -2), new Point(14, -2), new Point(15, -2), new Point(-16, -1), new Point(-15, -1), new Point(-14, -1), new Point(-13, -1), new Point(-12, -1), new Point(-11, -1), new Point(8, -1), new Point(9, -1), new Point(11, -1), new Point(12, -1), new Point(13, -1), new Point(14, -1), new Point(15, -1), new Point(-16, 0), new Point(-15, 0), new Point(-14, 0), new Point(-13, 0), new Point(-12, 0), new Point(-11, 0), new Point(-10, 0), new Point(8, 0), new Point(9, 0), new Point(10, 0), new Point(11, 0), new Point(12, 0), new Point(13, 0), new Point(14, 0), new Point(15, 0), new Point(-16, 1), new Point(-15, 1), new Point(-14, 1), new Point(-13, 1), new Point(-12, 1), new Point(-11, 1), new Point(8, 1), new Point(9, 1), new Point(11, 1), new Point(12, 1), new Point(13, 1), new Point(14, 1), new Point(15, 1), new Point(-16, 2), new Point(-15, 2), new Point(-14, 2), new Point(-13, 2), new Point(-12, 2), new Point(-11, 2), new Point(-10, 2), new Point(8, 2), new Point(9, 2), new Point(10, 2), new Point(11, 2), new Point(12, 2), new Point(13, 2), new Point(14, 2), new Point(-16, 3), new Point(-15, 3), new Point(-14, 3), new Point(-13, 3), new Point(-12, 3), new Point(-11, 3), new Point(-10, 3), new Point(8, 3), new Point(9, 3), new Point(10, 3), new Point(11, 3), new Point(12, 3), new Point(13, 3), new Point(-16, 4), new Point(-15, 4), new Point(-14, 4), new Point(-13, 4), new Point(-12, 4), new Point(-11, 4), new Point(-10, 4), new Point(8, 4), new Point(9, 4), new Point(10, 4), new Point(11, 4), new Point(12, 4), new Point(13, 4), new Point(14, 4), new Point(-16, 5), new Point(-15, 5), new Point(-14, 5), new Point(-13, 5), new Point(-12, 5), new Point(-11, 5), new Point(-10, 5), new Point(-9, 5), new Point(8, 5), new Point(9, 5), new Point(10, 5), new Point(11, 5), new Point(12, 5), new Point(13, 5), new Point(14, 5), new Point(-16, 6), new Point(-15, 6), new Point(-14, 6), new Point(-13, 6), new Point(-12, 6), new Point(-11, 6), new Point(-10, 6), new Point(-9, 6), new Point(-8, 6), new Point(7, 6), new Point(8, 6), new Point(9, 6), new Point(10, 6), new Point(11, 6), new Point(-16, 7), new Point(-15, 7), new Point(-14, 7), new Point(-13, 7), new Point(-12, 7), new Point(-11, 7), new Point(-10, 7), new Point(-9, 7), new Point(-8, 7), new Point(-7, 7), new Point(6, 7), new Point(7, 7), new Point(8, 7), new Point(9, 7), new Point(10, 7), new Point(-16, 8), new Point(-15, 8), new Point(-14, 8), new Point(-13, 8), new Point(-12, 8), new Point(-11, 8), new Point(-10, 8), new Point(-9, 8), new Point(-8, 8), new Point(-7, 8), new Point(-6, 8), new Point(-5, 8), new Point(-4, 8), new Point(-3, 8), new Point(-2, 8), new Point(-1, 8), new Point(0, 8), new Point(1, 8), new Point(2, 8), new Point(3, 8), new Point(4, 8), new Point(5, 8), new Point(6, 8), new Point(7, 8), new Point(8, 8), new Point(9, 8), new Point(-16, 9), new Point(-15, 9), new Point(-14, 9), new Point(-13, 9), new Point(-11, 9), new Point(-10, 9), new Point(-9, 9), new Point(-8, 9), new Point(-7, 9), new Point(-6, 9), new Point(-5, 9), new Point(-4, 9), new Point(-3, 9), new Point(-2, 9), new Point(-1, 9), new Point(0, 9), new Point(1, 9), new Point(2, 9), new Point(3, 9), new Point(4, 9), new Point(5, 9), new Point(6, 9), new Point(-16, 10), new Point(-15, 10), new Point(-14, 10), new Point(-13, 10), new Point(-12, 10), new Point(-11, 10), new Point(-10, 10), new Point(-9, 10), new Point(-8, 10), new Point(-7, 10), new Point(-6, 10), new Point(-5, 10), new Point(-4, 10), new Point(-3, 10), new Point(-2, 10), new Point(0, 10), new Point(2, 10), new Point(3, 10), new Point(4, 10), new Point(5, 10), new Point(-15, 11), new Point(-14, 11), new Point(-13, 11), new Point(-12, 11), new Point(-11, 11), new Point(-10, 11), new Point(-9, 11), new Point(-8, 11), new Point(-7, 11), new Point(-6, 11), new Point(-5, 11), new Point(-4, 11), new Point(-3, 11), new Point(-2, 11), new Point(-1, 11), new Point(0, 11), new Point(1, 11), new Point(2, 11), new Point(3, 11), new Point(4, 11), new Point(-15, 12), new Point(-14, 12), new Point(-12, 12), new Point(-10, 12), new Point(-8, 12), new Point(-7, 12), new Point(-6, 12), new Point(-5, 12), new Point(-4, 12), new Point(-3, 12), new Point(-2, 12), new Point(-1, 12), new Point(1, 12), new Point(2, 12), new Point(3, 12), new Point(-7, 13), new Point(-3, 13)]
    },
    {
        name: "water",
        grid: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        spawns: [new Point(1, -15), new Point(2, -15), new Point(3, -15), new Point(1, -14), new Point(2, -14), new Point(3, -14), new Point(4, -14), new Point(5, -14), new Point(1, -13), new Point(2, -13), new Point(3, -13), new Point(4, -13), new Point(5, -13), new Point(6, -13), new Point(2, -12), new Point(3, -12), new Point(4, -12), new Point(5, -12), new Point(6, -12), new Point(7, -12), new Point(8, -12), new Point(9, -12), new Point(3, -11), new Point(4, -11), new Point(5, -11), new Point(6, -11), new Point(7, -11), new Point(8, -11), new Point(9, -11), new Point(10, -11), new Point(4, -10), new Point(5, -10), new Point(6, -10), new Point(7, -10), new Point(8, -10), new Point(9, -10), new Point(10, -10), new Point(-2, -9), new Point(-1, -9), new Point(0, -9), new Point(3, -9), new Point(4, -9), new Point(5, -9), new Point(6, -9), new Point(7, -9), new Point(8, -9), new Point(9, -9), new Point(10, -9), new Point(11, -9), new Point(-7, -8), new Point(-6, -8), new Point(-5, -8), new Point(-2, -8), new Point(-1, -8), new Point(0, -8), new Point(1, -8), new Point(2, -8), new Point(3, -8), new Point(4, -8), new Point(5, -8), new Point(6, -8), new Point(7, -8), new Point(9, -8), new Point(10, -8), new Point(12, -8), new Point(-7, -7), new Point(-6, -7), new Point(-5, -7), new Point(-2, -7), new Point(-1, -7), new Point(0, -7), new Point(1, -7), new Point(2, -7), new Point(3, -7), new Point(4, -7), new Point(5, -7), new Point(6, -7), new Point(7, -7), new Point(8, -7), new Point(9, -7), new Point(11, -7), new Point(12, -7), new Point(-7, -6), new Point(-6, -6), new Point(-5, -6), new Point(-4, -6), new Point(-3, -6), new Point(-2, -6), new Point(-1, -6), new Point(0, -6), new Point(1, -6), new Point(2, -6), new Point(3, -6), new Point(4, -6), new Point(5, -6), new Point(6, -6), new Point(9, -6), new Point(10, -6), new Point(11, -6), new Point(12, -6), new Point(13, -6), new Point(-7, -5), new Point(-6, -5), new Point(-5, -5), new Point(-4, -5), new Point(-3, -5), new Point(-2, -5), new Point(-1, -5), new Point(0, -5), new Point(1, -5), new Point(2, -5), new Point(3, -5), new Point(4, -5), new Point(5, -5), new Point(6, -5), new Point(8, -5), new Point(9, -5), new Point(10, -5), new Point(11, -5), new Point(12, -5), new Point(13, -5), new Point(14, -5), new Point(-7, -4), new Point(-6, -4), new Point(-5, -4), new Point(-4, -4), new Point(-3, -4), new Point(-2, -4), new Point(0, -4), new Point(2, -4), new Point(3, -4), new Point(4, -4), new Point(5, -4), new Point(6, -4), new Point(7, -4), new Point(8, -4), new Point(9, -4), new Point(10, -4), new Point(12, -4), new Point(13, -4), new Point(14, -4), new Point(15, -4), new Point(-7, -3), new Point(-6, -3), new Point(-5, -3), new Point(-4, -3), new Point(4, -3), new Point(5, -3), new Point(6, -3), new Point(7, -3), new Point(8, -3), new Point(9, -3), new Point(10, -3), new Point(11, -3), new Point(12, -3), new Point(13, -3), new Point(14, -3), new Point(15, -3), new Point(-8, -2), new Point(-7, -2), new Point(-6, -2), new Point(-5, -2), new Point(-4, -2), new Point(4, -2), new Point(5, -2), new Point(6, -2), new Point(7, -2), new Point(8, -2), new Point(9, -2), new Point(10, -2), new Point(11, -2), new Point(12, -2), new Point(13, -2), new Point(14, -2), new Point(-9, -1), new Point(-8, -1), new Point(-7, -1), new Point(-6, -1), new Point(-5, -1), new Point(5, -1), new Point(6, -1), new Point(7, -1), new Point(8, -1), new Point(9, -1), new Point(11, -1), new Point(13, -1), new Point(14, -1), new Point(15, -1), new Point(-9, 0), new Point(-8, 0), new Point(-7, 0), new Point(-6, 0), new Point(-5, 0), new Point(-4, 0), new Point(4, 0), new Point(5, 0), new Point(6, 0), new Point(7, 0), new Point(8, 0), new Point(9, 0), new Point(10, 0), new Point(11, 0), new Point(13, 0), new Point(14, 0), new Point(15, 0), new Point(-9, 1), new Point(-8, 1), new Point(-7, 1), new Point(-6, 1), new Point(-5, 1), new Point(5, 1), new Point(6, 1), new Point(7, 1), new Point(8, 1), new Point(9, 1), new Point(12, 1), new Point(13, 1), new Point(14, 1), new Point(15, 1), new Point(-9, 2), new Point(-8, 2), new Point(-7, 2), new Point(-6, 2), new Point(-5, 2), new Point(-4, 2), new Point(4, 2), new Point(5, 2), new Point(6, 2), new Point(7, 2), new Point(8, 2), new Point(12, 2), new Point(13, 2), new Point(14, 2), new Point(-9, 3), new Point(-8, 3), new Point(-7, 3), new Point(-6, 3), new Point(-5, 3), new Point(-4, 3), new Point(4, 3), new Point(6, 3), new Point(7, 3), new Point(10, 3), new Point(11, 3), new Point(12, 3), new Point(13, 3), new Point(14, 3), new Point(-8, 4), new Point(-7, 4), new Point(-5, 4), new Point(-4, 4), new Point(-3, 4), new Point(-2, 4), new Point(0, 4), new Point(2, 4), new Point(3, 4), new Point(4, 4), new Point(5, 4), new Point(6, 4), new Point(9, 4), new Point(10, 4), new Point(11, 4), new Point(12, 4), new Point(13, 4), new Point(-11, 5), new Point(-10, 5), new Point(-9, 5), new Point(-8, 5), new Point(-7, 5), new Point(-6, 5), new Point(-5, 5), new Point(-4, 5), new Point(-3, 5), new Point(-2, 5), new Point(-1, 5), new Point(0, 5), new Point(1, 5), new Point(2, 5), new Point(3, 5), new Point(4, 5), new Point(5, 5), new Point(6, 5), new Point(7, 5), new Point(8, 5), new Point(9, 5), new Point(10, 5), new Point(11, 5), new Point(12, 5), new Point(-11, 6), new Point(-10, 6), new Point(-9, 6), new Point(-7, 6), new Point(-4, 6), new Point(-2, 6), new Point(0, 6), new Point(2, 6), new Point(3, 6), new Point(4, 6), new Point(5, 6), new Point(7, 6), new Point(8, 6), new Point(10, 6), new Point(11, 6), new Point(12, 6), new Point(-10, 7), new Point(-9, 7), new Point(-8, 7), new Point(-7, 7), new Point(-2, 7), new Point(-1, 7), new Point(1, 7), new Point(2, 7), new Point(3, 7), new Point(4, 7), new Point(5, 7), new Point(8, 7), new Point(9, 7), new Point(10, 7), new Point(11, 7), new Point(-9, 8), new Point(-8, 8), new Point(-1, 8), new Point(0, 8), new Point(1, 8), new Point(3, 8), new Point(4, 8), new Point(5, 8), new Point(0, 9), new Point(1, 9), new Point(2, 9), new Point(3, 9)]
    },
    {
        name: "earth",
        grid: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 1, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 2, 2, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 2, 2, 1, 0, 1, 1, 0, 2, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 2, 2, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0],
            [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 2, 2, 2, 1, 0, 0, 0, 0],
            [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 1, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 1, 1, 0, 0],
            [1, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0],
            [0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 0, 0, 0, 2, 2, 1, 1, 0, 0, 0, 1, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 1, 1],
            [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 1],
            [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 0, 2, 2, 1, 1],
            [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
            [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [1, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 1, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
            [0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 2, 1, 1, 1, 2, 0, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
            [0, 1, 1, 2, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 1, 1, 1, 1, 2, 2, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 2, 2, 0, 0, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 1, 1, 1, 1, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        spawns: [new Point(-16, -16), new Point(-15, -16), new Point(-8, -16), new Point(-7, -16), new Point(2, -16), new Point(3, -16), new Point(4, -16), new Point(5, -16), new Point(6, -16), new Point(7, -16), new Point(8, -16), new Point(10, -16), new Point(11, -16), new Point(12, -16), new Point(13, -16), new Point(14, -16), new Point(-16, -15), new Point(-15, -15), new Point(-9, -15), new Point(-8, -15), new Point(-7, -15), new Point(4, -15), new Point(5, -15), new Point(11, -15), new Point(12, -15), new Point(13, -15), new Point(14, -15), new Point(-16, -14), new Point(-15, -14), new Point(-8, -14), new Point(-7, -14), new Point(-3, -14), new Point(4, -14), new Point(5, -14), new Point(12, -14), new Point(13, -14), new Point(14, -14), new Point(15, -14), new Point(-16, -13), new Point(-15, -13), new Point(-8, -13), new Point(-7, -13), new Point(-4, -13), new Point(-3, -13), new Point(-2, -13), new Point(-1, -13), new Point(4, -13), new Point(5, -13), new Point(10, -13), new Point(11, -13), new Point(12, -13), new Point(14, -13), new Point(15, -13), new Point(-16, -12), new Point(-15, -12), new Point(-14, -12), new Point(-13, -12), new Point(-12, -12), new Point(-9, -12), new Point(-8, -12), new Point(-7, -12), new Point(-4, -12), new Point(-2, -12), new Point(-1, -12), new Point(4, -12), new Point(5, -12), new Point(11, -12), new Point(12, -12), new Point(-16, -11), new Point(-15, -11), new Point(-14, -11), new Point(-13, -11), new Point(-12, -11), new Point(-11, -11), new Point(-10, -11), new Point(-9, -11), new Point(-8, -11), new Point(-7, -11), new Point(-6, -11), new Point(-4, -11), new Point(-3, -11), new Point(-2, -11), new Point(-1, -11), new Point(0, -11), new Point(1, -11), new Point(2, -11), new Point(3, -11), new Point(4, -11), new Point(5, -11), new Point(8, -11), new Point(11, -11), new Point(12, -11), new Point(-16, -10), new Point(-15, -10), new Point(-12, -10), new Point(-11, -10), new Point(-10, -10), new Point(-9, -10), new Point(-8, -10), new Point(-7, -10), new Point(-6, -10), new Point(-5, -10), new Point(-4, -10), new Point(-3, -10), new Point(-2, -10), new Point(-1, -10), new Point(0, -10), new Point(1, -10), new Point(2, -10), new Point(3, -10), new Point(4, -10), new Point(5, -10), new Point(6, -10), new Point(7, -10), new Point(8, -10), new Point(11, -10), new Point(12, -10), new Point(-16, -9), new Point(-15, -9), new Point(-14, -9), new Point(10, -9), new Point(11, -9), new Point(12, -9), new Point(-15, -8), new Point(-14, -8), new Point(10, -8), new Point(11, -8), new Point(12, -8), new Point(13, -8), new Point(-14, -7), new Point(10, -7), new Point(-14, -6), new Point(15, -6), new Point(-14, -5), new Point(-13, -5), new Point(15, -5), new Point(-14, -4), new Point(-13, -4), new Point(-12, -4), new Point(-11, -4), new Point(-10, -4), new Point(-9, -4), new Point(15, -4), new Point(-14, -3), new Point(-13, -3), new Point(-12, -3), new Point(-11, -3), new Point(-10, -3), new Point(-9, -3), new Point(15, -3), new Point(-14, -2), new Point(-13, -2), new Point(-12, -2), new Point(-11, -2), new Point(-10, -2), new Point(-9, -2), new Point(10, -2), new Point(11, -2), new Point(12, -2), new Point(13, -2), new Point(15, -2), new Point(-16, -1), new Point(-15, -1), new Point(-14, -1), new Point(-13, -1), new Point(-12, -1), new Point(10, -1), new Point(11, -1), new Point(12, -1), new Point(-16, 0), new Point(-15, 0), new Point(-14, 0), new Point(10, 0), new Point(-16, 1), new Point(10, 1), new Point(-16, 2), new Point(10, 2), new Point(11, 2), new Point(12, 2), new Point(-16, 3), new Point(-15, 3), new Point(-12, 3), new Point(-11, 3), new Point(-10, 3), new Point(-9, 3), new Point(10, 3), new Point(11, 3), new Point(12, 3), new Point(13, 3), new Point(-16, 4), new Point(-15, 4), new Point(-12, 4), new Point(-11, 4), new Point(-10, 4), new Point(-9, 4), new Point(10, 4), new Point(11, 4), new Point(12, 4), new Point(13, 4), new Point(14, 4), new Point(15, 4), new Point(-16, 5), new Point(-15, 5), new Point(-14, 5), new Point(-13, 5), new Point(-12, 5), new Point(10, 5), new Point(11, 5), new Point(12, 5), new Point(15, 5), new Point(-16, 6), new Point(-15, 6), new Point(-14, 6), new Point(-13, 6), new Point(-12, 6), new Point(10, 6), new Point(12, 6), new Point(15, 6), new Point(-14, 7), new Point(-13, 7), new Point(-12, 7), new Point(-11, 7), new Point(10, 7), new Point(11, 7), new Point(12, 7), new Point(13, 7), new Point(14, 7), new Point(15, 7), new Point(-14, 8), new Point(-13, 8), new Point(-12, 8), new Point(-7, 8), new Point(-6, 8), new Point(-5, 8), new Point(-4, 8), new Point(-3, 8), new Point(-2, 8), new Point(-1, 8), new Point(0, 8), new Point(1, 8), new Point(2, 8), new Point(11, 8), new Point(12, 8), new Point(13, 8), new Point(14, 8), new Point(15, 8), new Point(-14, 9), new Point(-13, 9), new Point(-12, 9), new Point(-7, 9), new Point(-6, 9), new Point(-5, 9), new Point(-4, 9), new Point(-3, 9), new Point(-2, 9), new Point(-1, 9), new Point(0, 9), new Point(1, 9), new Point(2, 9), new Point(3, 9), new Point(5, 9), new Point(6, 9), new Point(7, 9), new Point(8, 9), new Point(-14, 10), new Point(-13, 10), new Point(-12, 10), new Point(-11, 10), new Point(-10, 10), new Point(-9, 10), new Point(-8, 10), new Point(-7, 10), new Point(-6, 10), new Point(-5, 10), new Point(-4, 10), new Point(-3, 10), new Point(-2, 10), new Point(-1, 10), new Point(1, 10), new Point(2, 10), new Point(3, 10), new Point(4, 10), new Point(5, 10), new Point(6, 10), new Point(7, 10), new Point(-13, 11), new Point(-12, 11), new Point(-11, 11), new Point(-10, 11), new Point(-9, 11), new Point(-8, 11), new Point(-7, 11), new Point(-4, 11), new Point(-3, 11), new Point(-2, 11), new Point(2, 11), new Point(3, 11), new Point(4, 11), new Point(5, 11), new Point(6, 11), new Point(7, 11), new Point(-12, 12), new Point(-11, 12), new Point(-10, 12), new Point(-9, 12), new Point(-7, 12), new Point(-4, 12), new Point(-3, 12), new Point(2, 12), new Point(5, 12), new Point(-11, 13), new Point(-10, 13), new Point(-3, 13), new Point(-11, 14), new Point(-10, 14), new Point(-9, 14)]
    },
    {
        name: "fire",
        grid: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 3, 3, 0, 0, 0, 3, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        spawns: [new Point(-8, -7), new Point(-5, -7), new Point(-8, -6), new Point(-7, -6), new Point(-6, -6), new Point(-5, -6), new Point(-4, -6), new Point(-1, -6), new Point(2, -6), new Point(3, -6), new Point(4, -6), new Point(-8, -5), new Point(-7, -5), new Point(-6, -5), new Point(-4, -5), new Point(-3, -5), new Point(-2, -5), new Point(-1, -5), new Point(0, -5), new Point(1, -5), new Point(2, -5), new Point(3, -5), new Point(4, -5), new Point(-8, -4), new Point(-7, -4), new Point(-6, -4), new Point(-5, -4), new Point(-4, -4), new Point(-3, -4), new Point(-2, -4), new Point(0, -4), new Point(2, -4), new Point(3, -4), new Point(4, -4), new Point(5, -4), new Point(-9, -3), new Point(-8, -3), new Point(-7, -3), new Point(-6, -3), new Point(-5, -3), new Point(-4, -3), new Point(4, -3), new Point(5, -3), new Point(6, -3), new Point(7, -3), new Point(-8, -2), new Point(-7, -2), new Point(-6, -2), new Point(-5, -2), new Point(-4, -2), new Point(4, -2), new Point(5, -2), new Point(6, -2), new Point(7, -2), new Point(-8, -1), new Point(-7, -1), new Point(-6, -1), new Point(-5, -1), new Point(5, -1), new Point(6, -1), new Point(-8, 0), new Point(-7, 0), new Point(-6, 0), new Point(-5, 0), new Point(-4, 0), new Point(4, 0), new Point(5, 0), new Point(6, 0), new Point(-8, 1), new Point(-7, 1), new Point(-6, 1), new Point(-5, 1), new Point(5, 1), new Point(6, 1), new Point(7, 1), new Point(-7, 2), new Point(-6, 2), new Point(-5, 2), new Point(-4, 2), new Point(4, 2), new Point(5, 2), new Point(7, 2), new Point(-6, 3), new Point(-5, 3), new Point(-4, 3), new Point(4, 3), new Point(5, 3), new Point(6, 3), new Point(-6, 4), new Point(-5, 4), new Point(-4, 4), new Point(-3, 4), new Point(-2, 4), new Point(0, 4), new Point(2, 4), new Point(3, 4), new Point(4, 4), new Point(5, 4), new Point(6, 4), new Point(7, 4), new Point(-8, 5), new Point(-7, 5), new Point(-6, 5), new Point(-4, 5), new Point(-3, 5), new Point(-2, 5), new Point(-1, 5), new Point(0, 5), new Point(1, 5), new Point(2, 5), new Point(3, 5), new Point(4, 5), new Point(6, 5), new Point(7, 5), new Point(-8, 6), new Point(-7, 6), new Point(-6, 6), new Point(-5, 6), new Point(-4, 6), new Point(-3, 6), new Point(-2, 6), new Point(-1, 6), new Point(0, 6), new Point(1, 6), new Point(2, 6), new Point(3, 6), new Point(4, 6), new Point(5, 6), new Point(6, 6), new Point(7, 6), new Point(-8, 7), new Point(-7, 7), new Point(-6, 7), new Point(-5, 7), new Point(-4, 7), new Point(-3, 7), new Point(-2, 7), new Point(-1, 7), new Point(0, 7), new Point(1, 7), new Point(2, 7), new Point(3, 7), new Point(4, 7), new Point(5, 7), new Point(-8, 8), new Point(-7, 8), new Point(-6, 8), new Point(-5, 8), new Point(-4, 8), new Point(-3, 8), new Point(-2, 8), new Point(-1, 8), new Point(0, 8), new Point(1, 8), new Point(2, 8), new Point(4, 8), new Point(5, 8), new Point(-8, 9), new Point(-6, 9), new Point(-5, 9), new Point(-2, 9), new Point(-1, 9), new Point(0, 9), new Point(1, 9), new Point(4, 9), new Point(5, 9), new Point(6, 9), new Point(-8, 10), new Point(-7, 10), new Point(-6, 10), new Point(-5, 10), new Point(0, 10), new Point(2, 10), new Point(3, 10), new Point(5, 10), new Point(-7, 11), new Point(-6, 11), new Point(-5, 11), new Point(-4, 11), new Point(-3, 11), new Point(3, 11)]
    },
    {
        name: "body",
        grid: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        spawns: [new Point(3, -10), new Point(-2, -9), new Point(-1, -9), new Point(2, -9), new Point(3, -9), new Point(-5, -8), new Point(-4, -8), new Point(-3, -8), new Point(-2, -8), new Point(-1, -8), new Point(0, -8), new Point(1, -8), new Point(2, -8), new Point(-4, -7), new Point(-3, -7), new Point(-1, -7), new Point(0, -7), new Point(1, -7), new Point(2, -7), new Point(3, -7), new Point(5, -7), new Point(-6, -6), new Point(-5, -6), new Point(-4, -6), new Point(-3, -6), new Point(-2, -6), new Point(-1, -6), new Point(0, -6), new Point(1, -6), new Point(2, -6), new Point(3, -6), new Point(4, -6), new Point(5, -6), new Point(6, -6), new Point(-9, -5), new Point(-8, -5), new Point(-7, -5), new Point(-6, -5), new Point(-5, -5), new Point(-4, -5), new Point(-3, -5), new Point(-2, -5), new Point(-1, -5), new Point(0, -5), new Point(1, -5), new Point(2, -5), new Point(3, -5), new Point(4, -5), new Point(7, -5), new Point(-8, -4), new Point(-7, -4), new Point(-6, -4), new Point(-5, -4), new Point(-4, -4), new Point(-3, -4), new Point(-2, -4), new Point(0, -4), new Point(2, -4), new Point(3, -4), new Point(4, -4), new Point(5, -4), new Point(6, -4), new Point(7, -4), new Point(-11, -3), new Point(-10, -3), new Point(-8, -3), new Point(-7, -3), new Point(-6, -3), new Point(-5, -3), new Point(-4, -3), new Point(4, -3), new Point(5, -3), new Point(6, -3), new Point(7, -3), new Point(-10, -2), new Point(-9, -2), new Point(-8, -2), new Point(-7, -2), new Point(-6, -2), new Point(-5, -2), new Point(-4, -2), new Point(4, -2), new Point(5, -2), new Point(6, -2), new Point(7, -2), new Point(-11, -1), new Point(-10, -1), new Point(-9, -1), new Point(-8, -1), new Point(-7, -1), new Point(-6, -1), new Point(-5, -1), new Point(5, -1), new Point(6, -1), new Point(7, -1), new Point(8, -1), new Point(-10, 0), new Point(-9, 0), new Point(-8, 0), new Point(-7, 0), new Point(-6, 0), new Point(-5, 0), new Point(-4, 0), new Point(4, 0), new Point(5, 0), new Point(6, 0), new Point(7, 0), new Point(8, 0), new Point(9, 0), new Point(-11, 1), new Point(-10, 1), new Point(-9, 1), new Point(-8, 1), new Point(-7, 1), new Point(-6, 1), new Point(-5, 1), new Point(5, 1), new Point(6, 1), new Point(7, 1), new Point(8, 1), new Point(9, 1), new Point(-12, 2), new Point(-11, 2), new Point(-10, 2), new Point(-9, 2), new Point(-8, 2), new Point(-7, 2), new Point(-6, 2), new Point(-5, 2), new Point(-4, 2), new Point(4, 2), new Point(5, 2), new Point(6, 2), new Point(7, 2), new Point(8, 2), new Point(9, 2), new Point(-12, 3), new Point(-11, 3), new Point(-10, 3), new Point(-9, 3), new Point(-8, 3), new Point(-7, 3), new Point(-6, 3), new Point(-5, 3), new Point(-4, 3), new Point(4, 3), new Point(5, 3), new Point(6, 3), new Point(7, 3), new Point(8, 3), new Point(9, 3), new Point(10, 3), new Point(-14, 4), new Point(-13, 4), new Point(-12, 4), new Point(-11, 4), new Point(-9, 4), new Point(-8, 4), new Point(-7, 4), new Point(-6, 4), new Point(-5, 4), new Point(-4, 4), new Point(-3, 4), new Point(-2, 4), new Point(0, 4), new Point(2, 4), new Point(3, 4), new Point(4, 4), new Point(5, 4), new Point(6, 4), new Point(7, 4), new Point(8, 4), new Point(9, 4), new Point(10, 4), new Point(-16, 5), new Point(-15, 5), new Point(-14, 5), new Point(-13, 5), new Point(-11, 5), new Point(-10, 5), new Point(-9, 5), new Point(-8, 5), new Point(-7, 5), new Point(-6, 5), new Point(-5, 5), new Point(-4, 5), new Point(-3, 5), new Point(-2, 5), new Point(-1, 5), new Point(0, 5), new Point(1, 5), new Point(2, 5), new Point(3, 5), new Point(4, 5), new Point(5, 5), new Point(6, 5), new Point(7, 5), new Point(8, 5), new Point(9, 5), new Point(-12, 6), new Point(-11, 6), new Point(-10, 6), new Point(-9, 6), new Point(-7, 6), new Point(-6, 6), new Point(-5, 6), new Point(-4, 6), new Point(-3, 6), new Point(-2, 6), new Point(0, 6), new Point(1, 6), new Point(2, 6), new Point(3, 6), new Point(4, 6), new Point(5, 6), new Point(6, 6), new Point(7, 6), new Point(8, 6), new Point(-13, 7), new Point(-12, 7), new Point(-10, 7), new Point(-9, 7), new Point(-8, 7), new Point(-6, 7), new Point(-5, 7), new Point(-4, 7), new Point(-3, 7), new Point(-2, 7), new Point(-1, 7), new Point(0, 7), new Point(1, 7), new Point(2, 7), new Point(3, 7), new Point(4, 7), new Point(5, 7), new Point(6, 7), new Point(7, 7), new Point(-5, 8), new Point(-3, 8), new Point(2, 8), new Point(4, 8), new Point(5, 8), new Point(6, 8), new Point(7, 8), new Point(7, 9), new Point(8, 9)]
    }
];
// Coloring information for mind altar floor tiles.
var MindFloorTiles = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 1, 0, 1, 2, 1, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 2, 1, 2, 1, 0, 1, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 1, 2, 1, 2, 0, 0, 1, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 2, 1, 2, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 2, 1, 2, 1, 2, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 1, 2, 0, 2, 1, 2, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 2, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 1, 2, 0, 2, 1, 1, 2, 1, 2, 0, 2, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];

var GameAction = (function () {
    function GameAction(type, location, orbIndex, toggleRun, changeWand, isNewAttract) {
        if (toggleRun === void 0) { toggleRun = false; }
        if (changeWand === void 0) { changeWand = false; }
        if (isNewAttract === void 0) { isNewAttract = false; }
        this.type = type;
        this.location = location;
        this.orbIndex = orbIndex;
        this.toggleRun = toggleRun;
        this.changeWand = changeWand;
        this.isNewAttract = isNewAttract;
    }
    GameAction.prototype.copy = function (discardSettings) {
        if (discardSettings === void 0) { discardSettings = false; }
        return new GameAction(this.type, this.location, this.orbIndex, !discardSettings && this.toggleRun, !discardSettings && this.changeWand, !discardSettings && this.isNewAttract);
    };
    GameAction.prototype.toString = function () {
        var s = (this.toggleRun ? "{r}" : "") + (this.changeWand ? "{q}" : "") + (this.isNewAttract ? "*" : "");
        switch (this.type) {
            case ActionType.Idle:
                s += "-";
                break;
            case ActionType.Move:
                s += this.location.toString();
                break;
            case ActionType.Attract:
                s += GameAction.orbIndexToChar(this.orbIndex);
                break;
            default:
                throw new Error("Invalid action type.");
                break;
        }
        return s;
    };
    GameAction.idle = function (toggleRun, changeWand) {
        if (toggleRun === void 0) { toggleRun = false; }
        if (changeWand === void 0) { changeWand = false; }
        return new GameAction(ActionType.Idle, Point.NaN, -1, toggleRun, changeWand, false);
    };
    GameAction.move = function (location, toggleRun, changeWand) {
        if (toggleRun === void 0) { toggleRun = false; }
        if (changeWand === void 0) { changeWand = false; }
        return new GameAction(ActionType.Move, location, -1, toggleRun, changeWand, false);
    };
    GameAction.attract = function (orbIndex, toggleRun, changeWand, isNewAttract) {
        if (toggleRun === void 0) { toggleRun = false; }
        if (changeWand === void 0) { changeWand = false; }
        if (isNewAttract === void 0) { isNewAttract = false; }
        return new GameAction(ActionType.Attract, Point.NaN, orbIndex, toggleRun, changeWand, isNewAttract);
    };
    GameAction.orbIndexToChar = function (index) {
        return index >= 26 ? String.fromCharCode(index + 71) : String.fromCharCode(index + 65);
    };
    GameAction.charToOrbIndex = function (c) {
        var charCode = c.charCodeAt(0);
        if (charCode >= 97 && charCode <= 122)
            return charCode - 71;
        if (charCode >= 65 && charCode <= 90)
            return charCode - 65;
        throw new Error("Invalid orb index char code.");
    };
    GameAction.parse = function (str) {
        var toggleRun = false, changeWand = false, newAttract = false;
        while (str[0] === "{" || str[0] === "*") {
            if (str[0] === "*") {
                newAttract = true;
                str = str.substr(1);
            }
            else {
                var j = str.indexOf("}");
                var c = str.substring(1, j);
                if (c === "r")
                    toggleRun = true;
                else if (c === "q")
                    changeWand = true;
                else
                    console.warn("Unknown inter-tick action, expected {r} or {q}.");
                str = str.substr(j + 1);
            }
        }
        if (str === null || str === undefined || str === "-")
            return GameAction.idle(toggleRun, changeWand);
        if (str.length === 1)
            return GameAction.attract(GameAction.charToOrbIndex(str), toggleRun, changeWand, newAttract);
        return GameAction.move(Point.parse(str), toggleRun, changeWand);
    };
    return GameAction;
})();

var GopBoard = (function () {
    function GopBoard(numRows, numColumns, reachDistance) {
        if (reachDistance === void 0) { reachDistance = 10; }
        this.numRows = numRows;
        this.numColumns = numColumns;
        this.reachDistance = reachDistance;
        this.grid = [];
        this.xmax = Math.floor(this.numRows / 2);
        this.ymax = Math.floor(this.numColumns / 2);
        this.clear();
    }
    GopBoard.prototype.isInRange = function (p) {
        return p.x <= this.xmax && p.x >= -this.xmax && p.y <= this.ymax && p.y >= -this.ymax;
    };
    GopBoard.prototype.get = function (p) {
        return this.isInRange(p) ? this.grid[p.y + this.ymax][p.x + this.xmax] : Tile.Barrier;
    };
    GopBoard.prototype.set = function (p, value) {
        if (this.isInRange(p))
            this.grid[p.y + this.ymax][p.x + this.xmax] = value;
        else
            console.log("Attempted to set GopBoard coordinate that is out of bounds: " + p);
    };
    GopBoard.prototype.clear = function () {
        this.grid = [];
        for (var y = 0; y < this.numRows; y++) {
            this.grid[y] = [];
            for (var x = 0; x < this.numColumns; x++)
                this.grid[y][x] = Tile.Floor;
        }
    };
    /**
     * Loads an altar by index into the GOP board.
     */
    GopBoard.prototype.loadAltar = function (altar) {
        this.clear();
        for (var y = 0; y < this.numRows; ++y)
            for (var x = 0; x < this.numColumns; ++x)
                this.grid[y][x] = AltarData[altar].grid[this.numRows - y - 1][x];
    };
    GopBoard.prototype.isPassable = function (p, mode) {
        return !(this.get(p) === Tile.Barrier ||
            (mode >= PathMode.Orb && this.get(p) === Tile.Rock) ||
            (mode === PathMode.Player && this.get(p) === Tile.Water));
    };
    // Returns whether an object at (x, y) can move west. Return false if (x, y) is an impassable square itself.
    GopBoard.prototype.canMoveWest = function (p, mode) {
        var p2 = new Point(p.x - 1, p.y);
        return this.isInRange(p) &&
            this.isInRange(p2) &&
            this.get(p) !== Tile.WallW &&
            this.get(p) !== Tile.WallSW &&
            this.isPassable(p, mode) &&
            this.isPassable(p2, mode);
    };
    // Returns whether an object at (x, y) can move east.
    GopBoard.prototype.canMoveEast = function (p, mode) {
        return this.canMoveWest(new Point(p.x + 1, p.y), mode);
    };
    // Returns whether an object at (x, y) can move south.
    GopBoard.prototype.canMoveSouth = function (p, mode) {
        var p2 = new Point(p.x, p.y - 1);
        return this.isInRange(p) &&
            this.isInRange(p2) &&
            this.get(p) !== Tile.WallS &&
            this.get(p) !== Tile.WallSW &&
            this.isPassable(p, mode) &&
            this.isPassable(p2, mode);
    };
    // Returns whether an object at (x, y) can move north.
    GopBoard.prototype.canMoveNorth = function (p, mode) {
        return this.canMoveSouth(new Point(p.x, p.y + 1), mode);
    };
    // Returns whether an object can move in the direction specified by dx and dy
    // (which are each either +1 or -1).
    GopBoard.prototype.canMove = function (p, dx, dy, mode) {
        if (Math.abs(dx) > 1 || Math.abs(dy) > 1)
            return false;
        var ddx = dx === 1 ? 1 : 0;
        var ddy = dy === 1 ? 1 : 0;
        // If it starts on a barrier, pretend that it's not for the moment.
        var old = this.get(p);
        if (!this.isPassable(p, mode))
            this.set(p, Tile.Floor);
        var result = true;
        if (dy === 0)
            result = this.canMoveWest(new Point(p.x + ddx, p.y), mode);
        else if (dx === 0)
            result = this.canMoveSouth(new Point(p.x, p.y + ddy), mode);
        else if (mode === PathMode.Sight) {
            if ((!this.canMoveWest(new Point(p.x + ddx, p.y + ddy), mode) && !this.canMoveWest(new Point(p.x + ddx, p.y + ddy - 1), mode)) ||
                (!this.canMoveSouth(new Point(p.x + ddx, p.y + ddy), mode) && !this.canMoveSouth(new Point(p.x + ddx - 1, p.y + ddy), mode)))
                result = false;
            else if (dx === dy)
                result = !((!this.canMoveWest(new Point(p.x + ddx, p.y + ddy), mode) && !this.canMoveSouth(new Point(p.x + ddx, p.y + ddy), mode)) ||
                    (!this.canMoveWest(new Point(p.x + ddx, p.y + ddy - 1), mode) && !this.canMoveSouth(new Point(p.x + ddx - 1, p.y + ddy), mode)));
            else
                result = !((!this.canMoveWest(new Point(p.x + ddx, p.y + ddy), mode) && !this.canMoveSouth(new Point(p.x + ddx - 1, p.y + ddy), mode)) ||
                    (!this.canMoveWest(new Point(p.x + ddx, p.y + ddy - 1), mode) && !this.canMoveSouth(new Point(p.x + ddx, p.y + ddy), mode)));
        }
        else {
            if ((dx === -dy && this.get(new Point(p.x + ddx, p.y + ddy)) === Tile.Minipillar1) || (dx === dy && this.get(new Point(p.x + ddx, p.y + ddy)) === Tile.Minipillar2))
                result = false;
            else
                result = this.canMoveWest(new Point(p.x + ddx, p.y + ddy), mode) && this.canMoveWest(new Point(p.x + ddx, p.y + ddy - 1), mode) && this.canMoveSouth(new Point(p.x + ddx, p.y + ddy), mode) && this.canMoveSouth(new Point(p.x + ddx - 1, p.y + ddy), mode);
        }
        this.set(p, old);
        return result;
    };
    /**
     * Returns whether the player can reach the orb from the specified locations, with repel either on or off.
     */
    GopBoard.prototype.canReach = function (player, orb, repel) {
        return !player.equals(orb) &&
            Point.walkingDistance(player, orb) <= (repel ? this.reachDistance - 2 : this.reachDistance) &&
            this.findObstacle(GopBoard.getLineOfSight(player, orb)) === -1; // Now check line of sight.
    };
    GopBoard.prototype.getPlayerPath = function (p1, p2, clickOrb) {
        if (p1.equals(p2)) {
            if (clickOrb) {
                for (var i = 0; i < 4; ++i) {
                    var p = p1.add(Point.gridOffsets[i]);
                    if (this.isInRange(p) && this.canMove(p1, Point.gridOffsets[i].x, Point.gridOffsets[i].y, PathMode.Player)) {
                        return [p];
                    }
                }
            }
            else {
                return [];
            }
        }
        var q = [p1];
        var parents = [];
        for (var y = -this.ymax; y <= this.ymax; ++y)
            parents[y] = [];
        parents[p1.y][p1.x] = Point.zero;
        var minDist = Infinity;
        var best = Point.NaN;
        while (q.length > 0) {
            var curr = q.shift();
            var dist = Point.distanceSquared(curr, p2);
            var diff = p2.subtract(curr);
            if ((clickOrb ? dist : Point.walkingDistance(curr, p2)) <= 1 && this.canMove(curr, diff.x, diff.y, PathMode.Player)) {
                parents[p2.y][p2.x] = curr;
                best = p2;
                break;
            }
            if (minDist > dist) {
                minDist = dist;
                best = curr;
            }
            for (var i = 0; i < Point.gridOffsets.length; ++i) {
                var p = curr.add(Point.gridOffsets[i]);
                if (this.isInRange(p) && Point.isNaN(parents[p.y][p.x]) && this.canMove(curr, Point.gridOffsets[i].x, Point.gridOffsets[i].y, PathMode.Player)) {
                    parents[p.y][p.x] = curr;
                    q.push(p);
                }
            }
        }
        var path = [];
        for (var p = best; !p.equals(p1); p = parents[p.y][p.x])
            path.push(p);
        if (clickOrb && path.length > 0 && p2.equals(path[0])) {
            // Don't include the orb location itself
            path.shift();
        }
        return path.reverse();
    };
    GopBoard.prototype.nearestPoint = function (src, dests, mode) {
        function pointEquals(pointToCompare) {
            return function (p) { return p.equals(pointToCompare); };
        }
        var nodes = [{ state: src, dist: 0 }];
        var visited = {};
        visited[src.toString()] = true;
        while (nodes.length > 0) {
            var curr = nodes.shift();
            for (var i = 0; i < Point.gridOffsets.length; ++i) {
                var p2 = curr.state.add(Point.gridOffsets[i]);
                if (this.isInRange(p2) && !visited[p2.toString()] && this.canMove(curr.state, Point.gridOffsets[i].x, Point.gridOffsets[i].y, mode)) {
                    if (dests.some(pointEquals(p2)))
                        return p2;
                    visited[p2.toString()] = true;
                    nodes.push({ state: p2, dist: curr.dist + 1 });
                }
            }
        }
        return Point.NaN;
    };
    GopBoard.prototype.nearestAltarPoint = function (p, mode) {
        var altarPoints = [];
        for (var y = -2; y <= 2; y++)
            for (var x = -2; x <= 2; x++)
                if (!(Math.abs(x) === 2 && Math.abs(y) === 2))
                    altarPoints.push(new Point(x, y));
        return this.nearestPoint(p, altarPoints, mode);
    };
    GopBoard.prototype.distanceToAltar = function (p, mode) {
        var nodes = [{ state: p, dist: 0 }];
        var visited = {};
        visited[p.toString()] = true;
        while (nodes.length > 0) {
            var curr = nodes.shift();
            if (curr.state.x >= -2 && curr.state.x <= 2 && curr.state.y >= -2 && curr.state.y <= 2)
                return curr.dist;
            var offsets = Point.gridOffsets;
            for (var i = 0; i < offsets.length; ++i) {
                var newPoint = curr.state.add(offsets[i]);
                if (this.isInRange(newPoint) && !visited[newPoint.toString()] && this.canMove(curr.state, offsets[i].x, offsets[i].y, mode)) {
                    visited[newPoint.toString()] = true;
                    nodes.push({ state: newPoint, dist: curr.dist + 1 });
                }
            }
        }
        return Infinity;
    };
    GopBoard.prototype.willMoveOrb = function (pPlayer, pOrb) {
        var mabs = Math.abs((pOrb.y - pPlayer.y) / (pOrb.x - pPlayer.x));
        var dx = Math.abs(pOrb.x - pPlayer.x) <= 1 ? 0 : pOrb.x > pPlayer.x ? -1 : 1;
        var dy = Math.abs(pOrb.y - pPlayer.y) <= 1 ? 0 : pOrb.y > pPlayer.y ? -1 : 1;
        return !((mabs > 2 && !this.canMove(pOrb, 0, dy, PathMode.Orb)) ||
            (mabs < 0.5 && !this.canMove(pOrb, dx, 0, PathMode.Orb)) ||
            (!this.canMove(pOrb, dx, 0, PathMode.Orb) && !this.canMove(pOrb, 0, dy, PathMode.Orb)));
    };
    // Returns a string representation of the grid.
    GopBoard.prototype.toString = function () {
        var s = "";
        for (var y = this.numRows - 1; y >= 0; y--) {
            for (var x = 0; x < this.numColumns; x++)
                s += this.grid[y][x];
            if (y !== 0)
                s += "\n";
        }
        return s;
    };
    /**
     * Returns -1 if there are no obstacles in the line of sight, otherwise the index of the
     * first obstacle to the line of sight.
     */
    GopBoard.prototype.findObstacle = function (losSquares) {
        if (losSquares.length === 0)
            return -1;
        if (this.get(losSquares[0]) === Tile.Barrier)
            return 0;
        for (var i = 1; i < losSquares.length; i++) {
            var p = losSquares[i];
            var pPrev = losSquares[i - 1];
            if ((i !== losSquares.length - 1 || this.isPassable(p, PathMode.Orb)) && !this.canMove(pPrev, p.x - pPrev.x, p.y - pPrev.y, PathMode.Sight))
                return i;
        }
        return -1;
    };
    /**
      * Returns whether the point (representing an orb) is in the altar.
      */
    GopBoard.isAdjacentToAltar = function (p) {
        return Math.abs(p.x) <= 2 && Math.abs(p.y) <= 2;
    };
    /**
     * Returns whether the point (representing a player) is next to the altar. The diagonal points are excluded.
     */
    GopBoard.isPlayerAdjacentToAltar = function (p) {
        return Math.abs(p.x) <= 2 && Math.abs(p.y) <= 2 && !(Math.abs(p.x) === 2 && Math.abs(p.y) === 2);
    };
    /**
     * Returns whether the point is inside the altar.
     */
    GopBoard.isInAltar = function (p) {
        return Math.abs(p.x) <= 1 && Math.abs(p.y) <= 1;
    };
    /**
     * Returns the offset location the orb target is when the player clicks it from that location.
     */
    GopBoard.getOrbOffset = function (diff, toPlayer) {
        if (toPlayer === void 0) { toPlayer = false; }
        // Returns the sign of x.
        function sign(x) {
            return x === 0 ? 0 : x > 0 ? 1 : -1;
        }
        // Returns the value that is smaller in absolute value.
        function absmin(x, y) {
            return Math.abs(x) < Math.abs(y) ? x : y;
        }
        var m = Math.abs(diff.y / diff.x);
        var dx = sign(diff.x);
        var dy = sign(diff.y);
        var result;
        if (m > 2)
            result = new Point(0, 2 * dy);
        else if (m > 1)
            result = new Point(dx, 2 * dy);
        else if (m === 1)
            result = new Point(2 * dx, 2 * dy);
        else if (m >= 0.5)
            result = new Point(2 * dx, dy);
        else
            result = new Point(2 * dx, 0);
        return toPlayer ? new Point(absmin(result.x, diff.x - dx), absmin(result.y, diff.y - dy)) : result;
    };
    /**
     * Returns an array of the squares that are in line of sight from p1 to p2.
     */
    GopBoard.getLineOfSight = function (p1, p2) {
        var distX = p2.x - p1.x, distY = p2.y - p1.y;
        var result = [];
        if (distX === 0 && distY === 0)
            return result;
        else if (p1.x > p2.x)
            return GopBoard.getLineOfSight(p2, p1).reverse();
        else if (p1.y > p2.y)
            return GopBoard.getLineOfSight(new Point(p1.x, -p1.y), new Point(p2.x, -p2.y)).map(function (p) { return new Point(p.x, -p.y); });
        else if (distX === 0)
            for (var y = p1.y; y <= p2.y; y++)
                result.push(new Point(p1.x, y));
        else if (distY === 0)
            for (var x = p1.x; x <= p2.x; x++)
                result.push(new Point(x, p1.y));
        else if (distX === distY)
            for (var x = p1.x, y = p1.y; x <= p2.x, y <= p2.y; x++, y++)
                result.push(new Point(x, y));
        else if (Math.abs(distY) > Math.abs(distX)) {
            if (distX * distY > 0)
                return GopBoard.getLineOfSight(new Point(p1.y, p1.x), new Point(p2.y, p2.x)).map(function (p) { return new Point(p.y, p.x); });
            return GopBoard.getLineOfSight(new Point(-p1.y, -p1.x), new Point(-p2.y, -p2.x)).map(function (p) { return new Point(-p.y, -p.x); });
        }
        else {
            result.push(p1);
            var x = p1.x + 1;
            var y = p1.y;
            var error = distX / 2;
            while (x <= p2.x) {
                result.push(new Point(x, y));
                if (error === 0) {
                    x += 1;
                    error += distY;
                }
                else {
                    error += distY;
                    x += 1;
                    if (error > distX) {
                        y += 1;
                        result.push(new Point(x - 1, y));
                        error -= distX;
                    }
                    else if (error === distX) {
                        y += 1;
                        // These are just edge cases.
                        if (distX === 6 && (distY === 1 || distY === 5) ||
                            distX === 10 && (distY === 1 || distY === 3 || distY === 7 || distY === 9))
                            result.push(new Point(x, y - 1));
                        else
                            result.push(new Point(x - 1, y));
                        error = 0;
                    }
                }
            }
        }
        return result;
    };
    return GopBoard;
})();

var Orb = (function () {
    function Orb(gs, index) {
        this.gs = gs;
        this.index = index;
        this.location = Point.NaN;
        this.prevLocation = Point.NaN;
        this.target = Point.NaN;
        this.deadTime = 0;
        this.controllingPlayer = null;
        this.controlState = OrbControlState.Free;
        this.wasTouchedThisTick = false;
    }
    Orb.prototype.spawn = function () {
        var spawns = AltarData[this.gs.altar].spawns;
        this.prevLocation = Point.NaN;
        if (this.gs.presetSpawnStack && this.gs.presetSpawnStack.length > 0) {
            this.location = this.gs.presetSpawnStack.shift();
        }
        else if (this.gs.random)
            this.location = spawns[this.gs.random.nextInt(spawns.length)];
        else
            this.location = Point.NaN;
        this.target = Point.NaN;
        this.deadTime = 0;
    };
    Orb.prototype.step = function () {
        function clamp(x, min, max) {
            return x < min ? min : x > max ? max : x;
        }
        this.prevLocation = this.location;
        if (this.target.equals(this.location))
            this.target = Point.NaN;
        if (GopBoard.isAdjacentToAltar(this.location)) {
            // Orb hit altar, don't move
            this.target = Point.NaN;
            if (++this.deadTime >= 1) {
                // There will be no zero-deading for you!
                this.gs.players.forEach(function (player) {
                    if (player.action &&
                        player.action.type === ActionType.Attract &&
                        player.action.orbIndex === this.index) {
                        player.action = GameAction.idle(player.action.toggleRun);
                        player.stopAttracting();
                    }
                }, this);
            }
            if (this.deadTime >= 2) {
                // Respawn and increment score
                this.spawn();
                this.gs.score++;
                this.gs.scoredTicks.push(this.gs.currentTick);
            }
        }
        else if (!Point.isNaN(this.target) && !this.location.equals(this.target)) {
            // Orb is moving
            var orbOffset = this.target.subtract(this.location);
            var offset = new Point(clamp(orbOffset.x, -1, 1), clamp(orbOffset.y, -1, 1));
            if (!this.gs.board.canMove(this.location, offset.x, offset.y, PathMode.Orb))
                if (this.gs.board.canMove(this.location, offset.x, 0, PathMode.Orb))
                    offset = new Point(offset.x, 0);
                else if (this.gs.board.canMove(this.location, 0, offset.y, PathMode.Orb))
                    offset = new Point(0, offset.y);
                else
                    offset = Point.zero;
            if (offset.equals(Point.zero))
                this.target = Point.NaN;
            else
                this.location = this.location.add(offset);
        }
        if (!this.wasTouchedThisTick && this.controlState !== OrbControlState.Free) {
            this.controlState = (this.controlState + 1) % 4;
        }
    };
    return Orb;
})();

var Player = (function () {
    function Player(gs, location, index) {
        this.gs = gs;
        this.location = location;
        this.index = index;
        // For painting
        this.prevLocation = Point.NaN;
        this.action = GameAction.idle();
        this.run = true;
        this.repel = false;
        this.currentOrb = null;
        this.delayAttractFromMoving = false;
        this.delayAttractFromPrototick = false;
        this.hasMovedThisTick = false;
        // Compare with new move target to see if needs to recalculate move path when moving.
        this.lastMoveTarget = Point.NaN;
        this.lastAttractTarget = Point.NaN;
        // Path player will take in the event that he needs to move.
        this.movePath = [];
        // For calculating move path.
        this.lastOrbClickLocation = Point.NaN;
        this.isAttracting = false;
        this.forceAttractOrb = null;
        this.holdLength = 0;
        this.previousAction = null;
        this.attractIneffective = false;
    }
    Player.prototype.stopAttracting = function () {
        this.currentOrb = null;
        this.isAttracting = false;
        this.holdLength = 0;
        this.forceAttractOrb = null;
        this.attractIneffective = false;
    };
    Player.prototype.freeze = function () {
        this.stopAttracting();
        this.lastOrbClickLocation = Point.NaN;
        this.lastMoveTarget = Point.NaN;
        this.movePath = [];
        this.prevLocation = Point.NaN;
        this.delayAttractFromMoving = false;
        this.delayAttractFromPrototick = false;
        this.hasMovedThisTick = false;
    };
    // Used in both moving and attracting.
    Player.prototype.stepMove = function (isSecondAttract) {
        if (this.movePath.length > 0) {
            var next = this.movePath.shift();
            if (this.movePath.length > 0 && this.run)
                next = this.movePath.shift();
            if (next !== undefined) {
                this.location = next;
                this.hasMovedThisTick = true;
                if (!isSecondAttract)
                    this.delayAttractFromMoving = true;
            }
        }
    };
    Player.prototype.step = function () {
        if (!this.action)
            this.action = GameAction.idle();
        if (this.action.toggleRun)
            this.run = !this.run;
        this.prevLocation = this.location;
        this.isAttracting = false;
        this.hasMovedThisTick = false;
        if (this.forceAttractOrb !== null) {
            // Override player's action.
            var toggleRun = this.action.toggleRun;
            var changeWand = this.action.changeWand;
            this.action = this.previousAction.copy();
            this.action.toggleRun = toggleRun;
            this.action.changeWand = changeWand;
        }
        if (this.action.type === ActionType.Move && this.location.equals(this.action.location)) {
            this.action = GameAction.idle(this.action.toggleRun, this.action.changeWand);
        }
        var attractTwice = false;
        switch (this.action.type) {
            case ActionType.Idle:
                this.stopAttracting();
                this.delayAttractFromMoving = false;
                this.delayAttractFromPrototick = false;
                this.lastMoveTarget = Point.NaN;
                this.lastAttractTarget = Point.NaN;
                break;
            case ActionType.Move:
                this.stopAttracting();
                this.lastAttractTarget = Point.NaN;
                this.delayAttractFromPrototick = false;
                if (!this.lastMoveTarget.equals(this.action.location)) {
                    // Calculate move path if the player clicked somewhere else.
                    this.movePath = this.gs.board.getPlayerPath(this.location, this.action.location, false);
                    this.lastMoveTarget = this.action.location;
                }
                if (this.movePath.length === 0) {
                    // Change to idle
                    this.lastMoveTarget = Point.NaN;
                    this.action = GameAction.idle(this.action.toggleRun, this.action.changeWand);
                    this.delayAttractFromMoving = false;
                }
                else {
                    this.stepMove(false);
                }
                break;
            case ActionType.Attract:
                this.lastMoveTarget = Point.NaN;
                if (!this.previousAction || this.previousAction.type !== ActionType.Attract || this.previousAction.orbIndex !== this.action.orbIndex) {
                    // Probably new attract, fix it.
                    this.action.isNewAttract = true;
                }
                var orb = this.gs.orbs[this.action.orbIndex];
                if (this.forceAttractOrb !== null ||
                    (!this.action.isNewAttract && !this.gs.board.canReach(this.location, orb.location, this.repel))) {
                    // "pre-attract" before wand changes state.
                    this.stepAttract(false);
                    attractTwice = true;
                }
                this.forceAttractOrb = null;
                break;
            default:
                console.log("Deobfuscated is a noob!");
                break;
        }
        if (this.action.changeWand)
            this.repel = !this.repel;
        if (this.action.type === ActionType.Attract)
            this.stepAttract(attractTwice);
        this.previousAction = this.action;
    };
    Player.prototype.forceAttractNextTick = function (orb) {
        if (!this.delayAttractFromPrototick || this.currentOrb === orb)
            this.forceAttractOrb = orb;
    };
    Player.prototype.stepAttract = function (isSecondAttract) {
        var board = this.gs.board;
        var orb = this.gs.orbs[this.action.orbIndex];
        var canReach = board.canReach(this.location, orb.location, this.repel);
        if (Point.isNaN(orb.location))
            return;
        if (this.forceAttractOrb !== null) {
            // Attract no matter what!
            this.attractSuccess(orb);
            return;
        }
        if (this.action.isNewAttract) {
            // Reset attract ineffectiveness and drag target.
            this.holdLength = 0;
            this.currentOrb = null;
            this.attractIneffective = false;
            this.lastOrbClickLocation = orb.location;
        }
        if (!canReach) {
            // Can't reach, start dragging.
            // Recalculate move path.
            if (Point.isNaN(this.lastOrbClickLocation))
                this.lastOrbClickLocation = orb.location;
            if (!this.lastOrbClickLocation.equals(this.lastAttractTarget)) {
                this.movePath = this.gs.board.getPlayerPath(this.location, this.lastOrbClickLocation, true);
                this.lastAttractTarget = this.lastOrbClickLocation;
            }
            if (this.movePath.length === 0) {
                // The move path is wrong, re-calculate...
                this.movePath = this.gs.board.getPlayerPath(this.location, orb.location, true);
            }
            if (!this.hasMovedThisTick)
                this.stepMove(isSecondAttract);
            if (board.canReach(this.location, orb.location, this.repel)) {
                // Pre-movement
                this.forceAttractNextTick(orb);
            }
            if (!isSecondAttract)
                this.delayAttractFromPrototick = false;
        }
        else if (this.delayAttractFromMoving || this.delayAttractFromPrototick) {
            if (this.delayAttractFromPrototick) {
                this.delayAttractFromPrototick = false;
            }
            else {
                // Force on next tick
                this.delayAttractFromPrototick = false;
                this.forceAttractNextTick(orb);
            }
        }
        else {
            this.attractSuccess(orb);
        }
        if (board.canReach(this.location, orb.location, this.repel) && this.currentOrb === orb) {
            // Attract even after moving, if it's the same orb.
            this.attractSuccess(orb);
        }
        if (this.action.isNewAttract) {
            // No longer new attract (unless the player clicked again).
            this.action = this.action.copy();
            this.action.isNewAttract = false;
        }
        if (!this.hasMovedThisTick)
            this.delayAttractFromMoving = false;
        else if (!isSecondAttract)
            this.delayAttractFromMoving = true;
    };
    Player.prototype.attractSuccess = function (orb) {
        this.forceAttractOrb = null;
        var cancelAttract = false;
        var orbOffset = GopBoard.getOrbOffset(this.location.subtract(orb.location), !this.repel);
        if (this.repel) {
            if (Point.walkingDistance(this.location, orb.location) >= this.gs.board.reachDistance - 2)
                cancelAttract = true;
            else
                orbOffset = orbOffset.negate();
        }
        if (this.isAttractIneffective(orb))
            this.attractIneffective = true;
        if (!this.attractIneffective && !cancelAttract) {
            orb.wasTouchedThisTick = true;
            orb.controllingPlayer = this;
            orb.controlState = OrbControlState.Controlled;
            orb.target = orb.location.add(orbOffset);
        }
        this.currentOrb = orb;
        // Orb has moved, drag path is now invalid.
        this.lastOrbClickLocation = orb.location;
        if (this.action.isNewAttract) {
            this.holdLength = 1;
        }
        else if (!this.isAttracting) {
            this.holdLength++;
        }
        this.delayAttractFromPrototick = this.holdLength === 1;
        this.isAttracting = true;
    };
    Player.prototype.isAttractIneffective = function (orb) {
        if (orb.controllingPlayer === this || orb.controllingPlayer === null || orb.controlState === OrbControlState.Free)
            return false;
        if (Point.isNaN(orb.target)) {
            // Orb is not moving.
            if (orb.controlState === OrbControlState.Wait2)
                return false;
            return this.index < orb.controllingPlayer.index;
        }
        return true;
    };
    return Player;
})();

var GameState = (function () {
    function GameState(board, playerLocations, presetSpawns, numberOfOrbs, seed, altar) {
        if (presetSpawns === void 0) { presetSpawns = []; }
        if (numberOfOrbs === void 0) { numberOfOrbs = 3; }
        if (seed === void 0) { seed = 5489; }
        if (altar === void 0) { altar = Altar.Air; }
        this.board = board;
        this.playerLocations = playerLocations;
        this.presetSpawns = presetSpawns;
        this.numberOfOrbs = numberOfOrbs;
        this.seed = seed;
        this.altar = altar;
        this.players = [];
        this.orbs = [];
        this.random = new MersenneTwister();
        this.scoredTicks = [];
        this.score = 0;
        this.currentTick = 0;
        for (var i = 0; i < playerLocations.length; i++)
            this.players.push(new Player(this, playerLocations[i], i));
        this.reset(altar);
    }
    GameState.prototype.addPlayer = function (location) {
        this.players.push(new Player(this, location, this.players.length));
    };
    GameState.prototype.reset = function (altar) {
        if (altar !== void 0)
            this.altar = altar;
        this.board.loadAltar(this.altar);
        this.orbs = [];
        this.presetSpawnStack = this.presetSpawns.slice(0);
        for (var i = 0; i < this.numberOfOrbs; ++i)
            this.orbs.push(new Orb(this, i));
        this.players.forEach(function (player) { return player.freeze(); });
        // Limit to the range [0,2147483647]
        this.seed = (this.seed >>> 0) & 0x7fffffff;
        if (this.random)
            this.random.init_genrand(this.seed);
        this.scoredTicks = [];
        this.score = 0;
        this.currentTick = 0;
        this.orbs.forEach(function (orb) { return orb.spawn(); });
    };
    GameState.prototype.step = function () {
        this.currentTick++;
        // Step orbs
        this.orbs.forEach(function (orb) {
            orb.wasTouchedThisTick = false;
            orb.step();
        });
        // Step players
        this.players.forEach(function (player) { return player.step(); });
    };
    GameState.ticksPerAltar = 199;
    return GameState;
})();

var GopCanvas = (function () {
    function GopCanvas(fgCanvas, gameState, visibilityRadius, playerIndex, orbSize, timerRadius, showTimer) {
        if (orbSize === void 0) { orbSize = 2; }
        if (timerRadius === void 0) { timerRadius = 2; }
        if (showTimer === void 0) { showTimer = true; }
        this.fgCanvas = fgCanvas;
        this.gameState = gameState;
        this.visibilityRadius = visibilityRadius;
        this.orbSize = orbSize;
        this.timerRadius = timerRadius;
        this.showTimer = showTimer;
        this.bgCanvas = document.createElement("canvas");
        this.bgContext = this.bgCanvas.getContext("2d");
        this.fgContext = this.fgCanvas.getContext("2d");
        this.board = this.gameState.board;
        this.showHighlights = false;
        this.showSpawnLocations = false;
        this.tickProgress = 0;
        this.rotationAngle = 0;
        // Element 7 takes care of all indices >= 7
        this.numAltars = 6;
        this.altarGroundColors = ["#555555", "#404833", "#665D5D", "#454f36", "#281400", "#272010", "#514745", "#848899"];
        this.waterColors = { 1: "#363025", 3: "#002244", 5: "#666622", 7: "#002244" };
        this.highlightColor = "rgba(0, 255, 0, 0.05)";
        this.playerIdleColors = ["#109090", "#871450", "#148718", "#630D0D"];
        this.playerAttractingColors = ["#20c0c0", "#a74470", "#4BD650", "#CC3B3B"];
        this.gridlineColor = "rgba(0, 0, 0, 0.25)";
        this.numImagesLoaded = 0;
        this.numImagesTotal = 7; // Orb image + altar images
        this.orbImageSrc = "/Images/yellow-orb-32x32.png";
        this.alterOverlayImagePath = "/Images/altar-overlays/";
        this.altarImages = [];
        // Mind altar floor color map
        this.mindAltarColors = {
            0: this.altarGroundColors[Altar.Mind],
            1: "#4C4C46",
            2: "#3F3A3A"
        };
        this.player = this.gameState.players[playerIndex];
        this.calculateDimensions();
        this.loadImages();
    }
    GopCanvas.prototype.floorColor = function () {
        return this.altarGroundColors[Math.min(this.numAltars + 1, this.gameState.altar)];
    };
    GopCanvas.prototype.tileColor = function (x, y) {
        var tile = this.board.get(new Point(x, y));
        switch (tile) {
            case Tile.Floor:
            case Tile.WallW:
            case Tile.WallS:
            case Tile.WallSW:
            case Tile.Minipillar1:
            case Tile.Minipillar2:
                if (this.gameState.altar === Altar.Mind || this.gameState.altar === 64) {
                    return this.mindAltarColors[MindFloorTiles[this.board.ymax - y][x + this.board.xmax]];
                }
                return this.floorColor();
            case Tile.Barrier:
                return "black";
            case Tile.Rock:
                return "#333";
            case Tile.Water:
                return this.waterColors[Math.min(this.numAltars + 1, this.gameState.altar)];
            default:
                return "#ff0000";
        }
    };
    GopCanvas.prototype.calculateDimensions = function () {
        this.gridSize = 2 * this.visibilityRadius + 1;
        this.cellWidth = this.fgCanvas.width / this.gridSize;
        this.cellHeight = this.fgCanvas.height / this.gridSize;
        this.bgCanvas.width = this.board.numRows * this.cellWidth;
        this.bgCanvas.height = this.board.numColumns * this.cellHeight;
    };
    GopCanvas.prototype.getDrawLocation = function (obj) {
        return Point.lerp(obj.prevLocation, obj.location, this.tickProgress);
    };
    /**
     * Converts grid coordinates to screen coordinates in the background canvas.
     */
    GopCanvas.prototype.toBgScreenCoords = function (x, y) {
        return new Point((x + Math.floor(this.board.numColumns / 2)) * this.cellWidth, (-y + Math.floor(this.board.numRows / 2)) * this.cellHeight);
    };
    /**
     * Converts grid coordinates to screen coordinates in the foreground canvas.
     * @param relative Whether the coordinates are relative to the player.
     */
    GopCanvas.prototype.toScreenCoords = function (x, y, relative) {
        if (relative === void 0) { relative = false; }
        if (relative) {
            var center = this.getDrawLocation(this.player);
            return new Point((x - center.x + this.visibilityRadius) * this.cellWidth, (-y + center.y + this.visibilityRadius) * this.cellHeight);
        }
        return new Point((x + this.visibilityRadius) * this.cellWidth, (-y + this.visibilityRadius) * this.cellHeight);
    };
    /**
     * Converts screen coordinates to grid coordinates.
     */
    GopCanvas.prototype.fromScreenCoords = function (x, y, truncate) {
        if (truncate === void 0) { truncate = true; }
        var center = this.getDrawLocation(this.player);
        var p = new Point(x / this.cellWidth - this.visibilityRadius - 0.5, -y / this.cellHeight + this.visibilityRadius + 0.5);
        var pRotated = new Point(p.x * Math.cos(this.rotationAngle) - p.y * Math.sin(this.rotationAngle), p.x * Math.sin(this.rotationAngle) + p.y * Math.cos(this.rotationAngle));
        var pTranslated = new Point(pRotated.x + center.x, pRotated.y + center.y);
        return truncate ? new Point(Math.floor(pTranslated.x + 0.5), Math.ceil(pTranslated.y - 0.5)) : new Point(pTranslated.x, pTranslated.y);
    };
    /**
     * Fills the square at the point (x, y) with the specified fill style.
     */
    GopCanvas.prototype.bgFillSquare = function (context, fillStyle, x, y, sizeDiff) {
        if (sizeDiff === void 0) { sizeDiff = 0; }
        var square = this.toBgScreenCoords(x, y);
        context.fillStyle = fillStyle;
        context.fillRect(square.x, square.y, this.cellWidth + sizeDiff, this.cellHeight + sizeDiff);
    };
    /**
    * Fills the square at the point (x, y) with the specified fill style.
    */
    GopCanvas.prototype.fillSquare = function (context, fillStyle, x, y, sizeDiff) {
        if (sizeDiff === void 0) { sizeDiff = 0; }
        var square = this.toScreenCoords(x, y);
        context.fillStyle = fillStyle;
        context.fillRect(square.x, square.y, this.cellWidth + sizeDiff, this.cellHeight + sizeDiff);
    };
    GopCanvas.prototype.fillSquareWithImage = function (src, x, y, factor) {
        var square = this.toScreenCoords(x, y, true);
        this.fgContext.drawImage(this.orbImage, square.x - 0.5 * (factor - 1) * this.cellWidth, square.y - 0.5 * (factor - 1) * this.cellHeight, factor * this.cellWidth, factor * this.cellHeight);
    };
    /**
     * Draws walls at (x, y) according to the board grid state.
     */
    GopCanvas.prototype.drawWalls = function (x, y) {
        var p = new Point(x, y);
        if (this.board.get(p) < Tile.WallW)
            return;
        var s = this.toBgScreenCoords(x, y);
        this.bgContext.beginPath();
        if (this.board.get(p) === Tile.WallS) {
            this.bgContext.moveTo(s.x, s.y + this.cellHeight);
            this.bgContext.lineTo(s.x + this.cellWidth, s.y + this.cellHeight);
        }
        else if (this.board.get(p) === Tile.WallW) {
            this.bgContext.moveTo(s.x, s.y);
            this.bgContext.lineTo(s.x, s.y + this.cellHeight);
        }
        else if (this.board.get(p) === Tile.WallSW) {
            this.bgContext.moveTo(s.x, s.y);
            this.bgContext.lineTo(s.x, s.y + this.cellHeight);
            this.bgContext.lineTo(s.x + this.cellWidth, s.y + this.cellHeight);
        }
        else if (this.board.get(p) >= Tile.Minipillar1) {
            this.bgContext.fillStyle = "black";
            this.bgContext.fillRect(s.x - 3, s.y + this.cellHeight - 3, 5, 5);
        }
        this.bgContext.stroke();
    };
    /**
     * Paints the barriers, walls, rocks, and water.
     */
    GopCanvas.prototype.paintBackground = function () {
        this.bgContext.fillStyle = this.floorColor();
        this.bgContext.fillRect(0, 0, this.bgCanvas.width, this.bgCanvas.height);
        for (var y = -this.board.ymax; y <= this.board.ymax; y++)
            for (var x = -this.board.xmax; x <= this.board.xmax; x++)
                if (this.tileColor(x, y) !== this.floorColor())
                    this.bgFillSquare(this.bgContext, this.tileColor(x, y), x, y, 0);
        // Draw gridlines
        this.bgContext.lineWidth = 1;
        this.bgContext.strokeStyle = this.gridlineColor;
        this.bgContext.beginPath();
        for (var x = 1; x <= this.board.numColumns; ++x) {
            this.bgContext.moveTo(x * this.cellWidth - 0.5, 0);
            this.bgContext.lineTo(x * this.cellWidth - 0.5, this.bgCanvas.height);
        }
        for (var y = 0; y < this.board.numRows; ++y) {
            this.bgContext.moveTo(0, y * this.cellHeight - 0.5);
            this.bgContext.lineTo(this.bgCanvas.width, y * this.cellHeight - 0.5);
        }
        this.bgContext.stroke();
        this.bgContext.strokeStyle = "black";
        this.bgContext.lineWidth = 3;
        for (var x = -this.board.xmax; x <= this.board.xmax; ++x)
            for (var y = -this.board.ymax; y <= this.board.ymax; ++y)
                this.drawWalls(x, y);
        // Draw altar images!
        if (this.gameState.altar > 0 && this.gameState.altar <= this.altarImages.length) {
            var drawLocation = this.toBgScreenCoords(-1, 1);
            var margin = this.cellWidth / 3;
            this.bgContext.drawImage(this.altarImages[this.gameState.altar - 1], drawLocation.x + margin, drawLocation.y + margin, this.cellWidth * 3 - 2 * margin, this.cellHeight * 3 - 2 * margin);
        }
    };
    GopCanvas.prototype.drawTimer = function () {
        if (this.gameState.currentTick < GameState.ticksPerAltar - 3) {
            var radius = this.timerRadius * this.cellWidth;
            var cx = this.fgCanvas.width - radius - 10;
            var cy = radius + 10;
            this.fgContext.fillStyle = "rgba(255, 255, 0, 0.2)";
            this.fgContext.beginPath();
            this.fgContext.moveTo(cx, cy);
            this.fgContext.arc(cx, cy, radius, -Math.PI / 2, -Math.PI / 2 - 2 * Math.PI * (1 - this.gameState.currentTick / (GameState.ticksPerAltar - 3)), true);
            this.fgContext.lineTo(cx, cy);
            this.fgContext.fill();
        }
    };
    /**
     * Paints the GOP canvas.
     */
    GopCanvas.prototype.paint = function () {
        var center = this.player === undefined ? Point.zero : this.getDrawLocation(this.player);
        if (this.rotationAngle !== 0) {
            // Rotate by rotationAngle
            this.fgContext.save();
            this.fgContext.translate(this.fgCanvas.width / 2, this.fgCanvas.height / 2);
            this.fgContext.rotate(this.rotationAngle);
            this.fgContext.translate(-this.fgCanvas.width / 2, -this.fgCanvas.height / 2);
        }
        this.fgContext.clearRect(0, 0, this.fgCanvas.width, this.fgCanvas.height);
        this.fgContext.save();
        this.fgContext.translate((-center.x - (26 - this.visibilityRadius)) * this.cellWidth, (center.y - (26 - this.visibilityRadius)) * this.cellHeight);
        this.fgContext.drawImage(this.bgCanvas, 0, 0);
        this.fgContext.restore();
        this.gameState.players.forEach(function (player, index) {
            var drawLocation = this.getDrawLocation(player);
            if (player.isAttracting && player.currentOrb !== null) {
                // Draw attracting pulses
                var orbDrawLocation = this.getDrawLocation(player.currentOrb);
                var p = player.repel ? Point.lerp(drawLocation, orbDrawLocation, this.tickProgress) : Point.lerp(orbDrawLocation, drawLocation, this.tickProgress);
                var screenCoords = this.toScreenCoords(p.x + 0.5, p.y - 0.5, true);
                this.fgContext.beginPath();
                this.fgContext.arc(Math.floor(screenCoords.x), Math.floor(screenCoords.y), this.cellWidth / 8, 0, 2 * Math.PI);
                this.fgContext.fillStyle = "rgba(255, 255, 0, 0.5)";
                this.fgContext.fill();
            }
            this.fillSquare(this.fgContext, player.isAttracting ? this.playerAttractingColors[index] : this.playerIdleColors[index], drawLocation.x - center.x, drawLocation.y - center.y, -1);
        }, this);
        for (var i = 0; i < this.gameState.orbs.length; ++i) {
            if (!Point.isNaN(this.gameState.orbs[i].location)) {
                var p = this.getDrawLocation(this.gameState.orbs[i]);
                // Rotate orbs back
                this.fgContext.save();
                var pScreen = this.toScreenCoords(p.x + 0.5, p.y - 0.5, true);
                this.fgContext.translate(pScreen.x, pScreen.y);
                this.fgContext.rotate(-this.rotationAngle);
                this.fgContext.translate(-pScreen.x, -pScreen.y);
                this.fillSquareWithImage(this.orbImageSrc, p.x, p.y, this.orbSize);
                this.fgContext.restore();
            }
        }
        this.fgContext.restore();
        if (this.showTimer)
            this.drawTimer();
    };
    GopCanvas.prototype.loadImages = function () {
        this.orbImage = this.loadImage(this.orbImageSrc);
        for (var i = 0; i < this.numAltars; ++i)
            this.altarImages[i] = this.loadImage(this.alterOverlayImagePath + AltarData[i + 1].name + ".png");
    };
    GopCanvas.prototype.loadImage = function (src) {
        var _this = this;
        var img = new Image();
        img.src = src;
        img.onload = function () {
            ++_this.numImagesLoaded;
            if (_this.numImagesLoaded === _this.numImagesTotal)
                _this.onAllImagesLoaded();
        };
        return img;
    };
    GopCanvas.prototype.onAllImagesLoaded = function () {
        this.paintBackground();
        this.paint();
    };
    return GopCanvas;
})();

var PlayerStartInfo = (function () {
    function PlayerStartInfo(location, run, repel) {
        this.location = location;
        this.run = run;
        this.repel = repel;
    }
    PlayerStartInfo.prototype.toString = function () {
        return this.location.toString() + (this.run ? "r" : "") + (this.repel ? "q" : "");
    };
    /**
     * Parses a string to a player start info. Example: (2,0)r
     */
    PlayerStartInfo.parse = function (str) {
        var location = Point.parse(str.substring(0, str.indexOf(")") + 1));
        var run = str.indexOf("r") != -1;
        var repel = str.indexOf("q") != -1;
        return new PlayerStartInfo(location, run, repel);
    };
    return PlayerStartInfo;
})();
var GameStartInfo = (function () {
    function GameStartInfo(seed, altar, players) {
        this.seed = seed;
        this.altar = altar;
        this.players = players;
    }
    GameStartInfo.prototype.toString = function () {
        var arr = [this.seed, this.altar];
        this.players.forEach(function (player) {
            arr.push(player.toString());
        });
        return "{" + arr.join(" ") + "}";
    };
    /**
     * Parses a game start info. Example: 24 3 (2,0)r.
     */
    GameStartInfo.parse = function (str) {
        var arr = str.split(" ");
        var seed = parseInt(arr[0]);
        var altar = parseInt(arr[1]);
        var players = [];
        for (var i = 2; i < arr.length; i++) {
            players.push(PlayerStartInfo.parse(arr[i]));
        }
        return new GameStartInfo(seed, altar, players);
    };
    GameStartInfo.default = function () { return new GameStartInfo(5489, Altar.Air, [new PlayerStartInfo(new Point(2, 0), true, false)]); };
    return GameStartInfo;
})();
/**
 * Keeps track of a list of game actions for multiple players.
 */
var GameActionList = (function () {
    function GameActionList(rawActions) {
        this.rawActions = rawActions;
    }
    /**
     * Gets the list of actions for a certain player.
     */
    GameActionList.prototype.getForPlayer = function (playerIndex) {
        return this.rawActions[playerIndex];
    };
    /**
     * Returns the number of players this action list is holding actions for.
     */
    GameActionList.prototype.numPlayers = function () {
        return this.rawActions.length;
    };
    /**
     * Pushes a new list of actions onto the list, one for each player.
     */
    GameActionList.prototype.push = function (actions) {
        for (var i = 0; i < this.rawActions.length; i++) {
            this.rawActions[i].push(actions[i]);
        }
    };
    /**
     * Pushes a new action for a specific player.
     */
    GameActionList.prototype.pushForPlayer = function (playerIndex, action) {
        this.rawActions[playerIndex].push(action);
    };
    GameActionList.prototype.sliceForPlayer = function (playerIndex, index) {
        this.rawActions[playerIndex] = this.rawActions[playerIndex].slice(0, index);
    };
    GameActionList.prototype.toString = function () {
        function formatActionStringWithCount(actionStr, count) {
            var str1 = new Array(count + 1).join(actionStr);
            var str2 = actionStr + "[" + count + "]";
            return str1.length < str2.length ? str1 : str2;
        }
        function formatActionsSinglePlayer(actions) {
            var s = "";
            if (actions.length > 0) {
                var c = 1;
                var prev = actions[0].toString();
                for (var i = 1; i < actions.length; i++) {
                    if (!actions[i])
                        break;
                    var a = actions[i].toString();
                    if (a === prev && !actions[i].toggleRun && !actions[i].changeWand && !actions[i].isNewAttract) {
                        ++c;
                    }
                    else {
                        s += formatActionStringWithCount(prev, c);
                        c = 1;
                    }
                    prev = a;
                }
                s += formatActionStringWithCount(prev, c);
            }
            return s;
        }
        if (this.rawActions.length > 1) {
            return "[" + this.rawActions.map(function (acts) { return formatActionsSinglePlayer(acts); }).join(";") + "]";
        }
        if (this.rawActions.length > 0)
            return formatActionsSinglePlayer(this.rawActions[0]);
        return "";
    };
    /**
     * Parses an action string to a game action list. For example, [*AA*B;*C-[3]].
     */
    GameActionList.parse = function (str) {
        function parseSinglePlayer(str) {
            var actions = [];
            var regex = /(\*|{r}|{q})*(-|[A-Za-z]|\(-?\d+,-?\d+\))(\[\d+\])?/g;
            var matches = str.match(regex);
            if (matches === null)
                return actions;
            str.match(regex).forEach(function (value) {
                var count = 1, actionStr = value;
                if (value[value.length - 1] === ']') {
                    // Repeat with count
                    var bracketStart = value.indexOf('['), bracketEnd = value.length - 1;
                    actionStr = value.substring(0, bracketStart);
                    count = parseInt(value.substring(bracketStart + 1, bracketEnd), 10);
                }
                var action = GameAction.parse(actionStr);
                actions.push(action);
                while (--count > 0)
                    actions.push(action.copy(true));
            });
            return actions;
        }
        if (str[0] === "[") {
            // Multiple players.
            var strs = str.substring(1, str.length - 1).split(";");
            var playerActions = strs.map(function (str) { return parseSinglePlayer(str); });
            return new GameActionList(playerActions);
        }
        return new GameActionList([parseSinglePlayer(str)]);
    };
    return GameActionList;
})();
var GameplayData = (function () {
    function GameplayData(startInfo, actions) {
        this.startInfo = startInfo;
        this.actions = actions;
        if (this.actions === void 0) {
            var actionArr = [];
            for (var i = 0; i < startInfo.players.length; i++)
                actionArr.push([]);
            this.actions = new GameActionList(actionArr);
        }
    }
    /**
     * Pushes a list of new actions onto the list, one for each player.
     */
    GameplayData.prototype.pushActions = function (newActions) {
        if (newActions.length !== this.actions.numPlayers())
            throw new Error("Action size mismatch.");
        this.actions.push(newActions);
    };
    GameplayData.prototype.toString = function () {
        return this.startInfo.toString() + this.actions.toString();
    };
    GameplayData.parse = function (str) {
        var startInfo;
        var actions;
        if (str[0] === "{") {
            // Start info
            var index = str.indexOf("}");
            var initialDataStr = str.substring(1, index);
            startInfo = GameStartInfo.parse(initialDataStr);
            str = str.substring(index + 1);
        }
        else {
            // No start info, use default.
            startInfo = GameStartInfo.default();
        }
        actions = GameActionList.parse(str);
        return new GameplayData(startInfo, actions);
    };
    GameplayData.default = function () { return new GameplayData(GameStartInfo.default()); };
    return GameplayData;
})();
