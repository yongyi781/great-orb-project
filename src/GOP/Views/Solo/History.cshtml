@model SoloHistoryViewModel
@{
    ViewData["Title"] = "Solo History";
    ViewData["UseDataTable"] = true;
}

<h2>@ViewData["Title"]</h2>
<div id="searchDiv" class="form-inline">
    Username: <input type="text" id="userSearch" class="form-control input-sm" placeholder="Search users">
    # orbs: <input type="number" id="numOrbsSearch" class="form-control input-sm" min="1" placeholder="Search # orbs" />
    Seed: <input type="number" id="seedSearch" class="form-control input-sm" min="0" placeholder="Search seed" />
    Altar: <input type="number" id="altarSearch" class="form-control input-sm" min="0" placeholder="Search altar" />
</div>
<hr />
<table id="gamesTable" class="table table-striped table-condensed table-hover table-clickable-rows" data-order='[[ 0, "desc" ]]'>
    <thead>
        <tr>
            <th>ID</th>
            <th>Timestamp</th>
            <th>Username</th>
            <th># orbs</th>
            <th>Seed</th>
            <th>Altar</th>
            <th>Score</th>
        </tr>
    </thead>
</table>

@section scripts {
    <script src="~/js/gop.min.js"></script>
    <script src="~/js/utils.js"></script>
    <script>
        $("#gamesTable").on("click", "tbody > tr", function () {
            window.open("/Watch/Solo/" + $(this).children("td:first").text());
        });

        var games = @Json.Serialize(Model.Games);
        games.forEach(function (game) {
            game.timestamp = new Date(game.timestamp);
        });

        $.fn.dataTable.ext.search.push(
            function(settings, data, dataIndex) {
                var username = $("#userSearch").val().toLowerCase();
                var numOrbs = parseInt($("#numOrbsSearch").val(), 10);
                var seed = parseInt($("#seedSearch").val(), 10);
                var altar = parseInt($("#altarSearch").val(), 10);
                var dataUsername = data[2].toLowerCase();
                var dataNumOrbs = parseInt(data[3], 10);
                var dataSeed = parseInt(data[4], 10);
                var dataAltar = parseInt(data[5], 10);
                return dataUsername.indexOf(username) > -1 &&
                    (isNaN(numOrbs) || dataNumOrbs == numOrbs) &&
                    (isNaN(seed) || dataSeed === seed) &&
                    (isNaN(altar) || dataAltar === altar);
            }
        );

        Utils.loadAltarNames().always(function () {
            table = $("#gamesTable").DataTable({
                data: games,
                deferRender: true,
                pageLength: 25,
                columns: [
                    { data: "id" },
                    {
                        data: "timestamp",
                        render: function (data, type, row) {
                            if (type === "display")
                                return data.toLocaleString();
                            return data;
                        }
                    },
                    { data: "username" },
                    { data: "numberOfOrbs" },
                    { data: "seed" },
                    {
                        data: "altar",
                        render: function (data, type, row) {
                            if (type === "display") {
                                if (AltarData[data] !== void 0) {
                                    // Capitalize name
                                    var name = AltarData[data].name;
                                    return `${data} (${name[0].toUpperCase()}${name.substring(1)})`;
                                }
                                return data + " (custom)";
                            }
                            return data;
                        }
                    },
                    { data: "score" }
                ]
            });

            $("#searchDiv > input").on("input", function() { table.draw(); });
        })
    </script>
}
