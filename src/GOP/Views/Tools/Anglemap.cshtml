@{
    ViewData["Title"] = "Angle Map and Altar Editor";
}

<h1>@ViewData["Title"]</h1>
<h3>Altar</h3>
<div id="altarsBtnGroup" class="btn-group" data-toggle="buttons">
    <label class="btn btn-primary"><input type="radio" name="altar" value="0">None</label>
    <label class="btn btn-primary"><input type="radio" name="altar" value="1">Air</label>
    <label class="btn btn-primary"><input type="radio" name="altar" value="2">Mind</label>
    <label class="btn btn-primary"><input type="radio" name="altar" value="3">Water</label>
    <label class="btn btn-primary"><input type="radio" name="altar" value="4">Earth</label>
    <label class="btn btn-primary"><input type="radio" name="altar" value="5">Fire</label>
    <label class="btn btn-primary"><input type="radio" name="altar" value="6">Body</label>
</div>
<div data-toggle="buttons">
    <h5>Elements</h5>
    <div class="btn-group">
        <label class="btn btn-default active"><input type="radio" name="tool" id="pointerTool" value="0" checked />Pointer</label>
        <label class="btn btn-default"><input type="radio" name="tool" id="spawnTool" value="11" />Spawn</label>
        <label class="btn btn-default"><input type="radio" name="tool" id="barrierTool" value="1" />Barrier</label>
        <label class="btn btn-default"><input type="radio" name="tool" id="rockTool" value="2" />Rock</label>
        <label class="btn btn-default"><input type="radio" name="tool" id="waterTool" value="3" />Water</label>
        <label class="btn btn-default"><input type="radio" name="tool" id="wallWTool" value="4" />West wall</label>
        <label class="btn btn-default"><input type="radio" name="tool" id="wallSTool" value="5" />South wall</label>
        <label class="btn btn-default"><input type="radio" name="tool" id="wallSWTool" value="6" />Southwest wall</label>
    </div>
    <h5>Utilities</h5>
    <div class="btn-group">
        <label class="btn btn-default"><input type="radio" name="tool" id="lineOfSightTool" value="7" />Draw line of sight</label>
        <label class="btn btn-default"><input type="radio" name="tool" id="pathToolRunning" value="8" />Draw path (running)</label>
        <label class="btn btn-default"><input type="radio" name="tool" id="pathToolWalking" value="9" />Draw path (walking)</label>
        <label class="btn btn-default"><input type="radio" name="tool" id="findClosestTool" value="10" />Find best positions from which to attract an orb</label>
        <label class="btn btn-default"><input type="radio" name="tool" id="colorDistanceTool" value="12" />Distance color gradient</label>
    </div>
</div>
<p id="coordsParagraph" class="align-center">Mouse coordinates: <span id="coords">(0,&nbsp;0)</span> | Player coordinates: <span id="playerCoords">N/A</span> | Orb coordinates: <span id="orbCoords">N/A</span> | Distance from orb to altar: <span id="orbDistance">Infinity</span></p>
<div id="canvasContainer" class="center">
    <canvas id="gameCanvas" width="848" height="848">You do not have a HTML5-enabled browser. You should download the latest version of your browser.</canvas>
</div>
<h2>Save as Custom Altar</h2>
<a asp-controller="Altars" asp-action="Index">View all custom altars</a>
<form action="~/api/altars" method="post" id="customAltarForm" class="form-inline">
    <label for="customAltarNameInput">Name (don't include "altar"):</label> <input id="customAltarNameInput" name="name" type="text" class="form-control" maxlength="24" /> <button class="btn btn-primary">Save</button>
    <p id="customAltarResult" class="alert alert-success" hidden></p>
</form>

@section Scripts {
    <script src="~/js/gop.min.js"></script>
    <script src="~/js/utils.min.js"></script>
    <script src="~/js/anglemap.min.js"></script>
    <script>
        var anglemap = new Anglemap($("#gameCanvas")[0]);

        function selectAltarButton(altar) {
            $("input[name=altar][value=" + altar + "]:radio").parent().button("toggle");
        }

        function setAltar(altar) {
            anglemap.setAltar(altar);
            selectAltarButton(altar);
        }

        function updateCoords(element, p) {
            if (isNaN(p.x) || isNaN(p.y))
                element.innerText = "N/A";
            else
                element.innerText = "(" + p.x + ",\u00A0" + p.y + ")";
        }

        function getSpawnsJSON() {
            return JSON.stringify(AltarData[anglemap.currentAltar].spawns.map(p =>[p.x, p.y]));
        }

        $("#gameCanvas").mousedown(function (e) {
            updateCoords(playerCoords, new Point(anglemap.playerX, anglemap.playerY));
            updateCoords(orbCoords, new Point(anglemap.orbX, anglemap.orbY));
            orbDistance.innerText = anglemap.gopBoard.distanceToAltar(anglemap.orbX, anglemap.orbY, PathMode.ORB);
        })

        $("#gameCanvas").mousemove(function (e) { updateCoords(coords, anglemap.fromScreenCoords(e.offsetX, e.offsetY)); });

        $("#altarsBtnGroup").on("change", "input[name=altar]:radio", function () { anglemap.setAltar(parseInt($(this).val(), 10)); });
        $("input[name=tool]").change(function () {
            var oldTool = anglemap.currentTool;
            anglemap.currentTool = +$(this).val();
            if (anglemap.currentTool != oldTool && anglemap.currentTool >= Tool.LineOfSight)
                anglemap.drawGrid();
        });

        $("#customAltarForm").submit(function (e) {
            e.preventDefault();

            $.post(e.currentTarget.action, {
                name: document.querySelector("#customAltarNameInput").value,
                grid: anglemap.gopBoard.toJSON(),
                spawns: getSpawnsJSON()
            }, function (data) {
                var endText = '<a target="_blank" href="/Solo?altar=' + data.id + '">here</a>.';
                var text = data.alreadyExists ? "Oops, it looks like your altar already exists! Play it " + endText : "Success! Play your new altar " + endText;
                $("#customAltarResult").prop("hidden", false).removeClass("alert-danger").addClass("alert-success").html(text);
            }).fail(function (xhr) {
                $("#customAltarResult").removeClass("alert-success").addClass("alert-danger").text(xhr.responseText);
            });
        });

        anglemap.currentTool = Tool.Pointer;

        var altar = Utils.getQueryAsNumber("altar", 1);
        Utils.loadAltar(altar).fail(function () { altar = 0; }).always(function () {
            if (altar > Altar.Body) {
                var $radio = $('<input type="radio" name="altar">').val(altar);
                $("#altarsBtnGroup").append($('<label class="btn btn-primary"/>').append($radio, AltarData[altar].name));
            }
            setAltar(altar);
        });
    </script>
}
