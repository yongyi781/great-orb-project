@model MultiplayerViewModel
@{
    ViewData["Title"] = "Multiplayer";
}

<h2>Multiplayer</h2>
<div id="multiplayerInterface">
    <p>Connected players:</p>
    <ul data-bind="foreach: players">
        <li data-bind="html: $root.playerHtml($index())"></li>
    </ul>
    <div class="form-inline">
        <select id="altarSelect" class="form-control" data-bind="value: altar, enable: startState() === 0">
            <option value="1">Air</option>
            <option value="2">Mind</option>
            <option value="3">Water</option>
            <option value="4">Earth</option>
            <option value="5">Fire</option>
            <option value="6">Body</option>
        </select>
        <input type="number" id="seedInput" class="form-control" data-bind="value: seed, enable: startState() === 0" placeholder="Seed" />
        <div class="checkbox">
            <label>
                <input type="checkbox" data-bind="checked: isWatching, enable: startState() === 0" /> Watch
            </label>
        </div>
        <button class="btn btn-primary" data-bind="click: sendStartSignal, enable: startState() === 0 && !isWatching(), text: startButtonText()"></button>
        <button class="btn btn-primary" data-bind="click: sendStopSignal, enable: !isWatching()">Reset</button>
    </div>
</div>
<div id="game" class="align-center">
</div>
<div id="sorry" style="display: none">
</div>

<div id="gamesContainer">
    <h2>All Games</h2>
    <p>Clicking a game will open a new window which will show a replay of the game.</p>
    <div class="form-inline">
        <input type="text" id="usernameFilterInput" class="form-control input-sm" data-bind="value: usernameFilter" placeholder="Filter username" />
        <input type="number" id="seedFilterInput" class="form-control input-sm" data-bind="value: seedFilter" placeholder="Filter seed" />
        <select id="altarFilterSelect" class="form-control input-sm" data-bind="value: altarFilter">
            <option value="" selected="selected">All altars</option>
            <option value="1">Air</option>
            <option value="2">Mind</option>
            <option value="3">Water</option>
            <option value="4">Earth</option>
            <option value="5">Fire</option>
            <option value="6">Body</option>
        </select>
        <select id="showLastSelect" class="form-control input-sm" data-bind="value: numGamesToShow">
            <option value="20" selected="selected">Show last 20 games</option>
            <option value="50">Show last 50 games</option>
            <option value="100">Show last 100 games</option>
            <option value="200">Show last 200 games</option>
            <option value="2147483647">Show all games</option>
        </select>
        @if (User.IsInRole("admin"))
        {
            <button type="button" id="verifyGamesButton" class="btn btn-success btn-sm">Verify all games</button>
        }
    </div>
    <table class="table table-striped table-condensed table-hover goplist-clickable-rows">
        <thead>
            <tr>
                <th>ID</th>
                <th>Time</th>
                <th># players</th>
                <th>Usernames</th>
                <th>Seed</th>
                <th>Altar</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: filteredGames">
            <tr data-bind="attr: { 'data-code': code }">
                <td data-bind="text: id"></td>
                <td data-bind="text: time"></td>
                <td data-bind="text: numberOfPlayers"></td>
                <td data-bind="text: usernames"></td>
                <td data-bind="text: seed"></td>
                <td data-bind="text: $root.altarNames[altar]"></td>
                <td data-bind="text: score"></td>
            </tr>
        </tbody>
    </table>
</div>

<!-- Axiliary elements -->
<div id="error-modal" title="Error" style="display: none">
</div>

@section Scripts {
    <script src="//cdnjs.cloudflare.com/ajax/libs/knockout/3.3.0/knockout-min.js"></script>
    <script src="~/lib/signalr/jquery.signalR.min.js"></script>
    <script src="~/js/gop.min.js"></script>
    <script src="~/js/gopui.js"></script>
    <script src="~/js/utils.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        (function () {
            var StartState = { STOPPED: 0, WAITING: 1, COUNTDOWN: 2, STARTED: 7, ENDED: 8 };
            var SaveState = { NOT_SAVED: 0, WAITING: 1, SAVED: 2 };

            var hub = $.connection.multiplayerHub,
                connectionStarted = false,
                gopui,
                lastTimestamp = 0,
                startingPositions = [new Point(2, 0), new Point(-2, 0), new Point(0, -2), new Point(0, 2), new Point(0, 0), new Point(2, -2)];

            var isCustomConfig = false;

            var options = {
                hideRestart: true,
                showSave: true,
                useServer: true,
                canvasMargin: 120,
                numberOfOrbs: 3,
                //showPlusMinusTicksButtons: false,
                //ticksPerAltar: 5,
                viewModelFunctions: {
                    minusTicksButtonEnabled: function () { return !multiViewModel.isWatching() && multiViewModel.startState() === StartState.STARTED; },
                    plusTicksButtonEnabled: function () { return !multiViewModel.isWatching() && multiViewModel.startState() === StartState.STARTED; }
                }
            };

            var spawnParam = Utils.getQueryAsString("spawns");
            if (spawnParam !== undefined) {
                try {
                    options.presetSpawns = JSON.parse(spawnParam).map(function (a) { return new Point(a[0], a[1]); });
                    isCustomConfig = isCustomConfig || (options.presetSpawns.length > 0);
                } catch (e) { }
            }

            var numOrbsParam = Utils.getQueryAsString("numorbs");
            if (numOrbsParam !== undefined) {
                options.numberOfOrbs = Math.max(0, Math.min(26, parseInt(numOrbsParam, 10)));
            }

            var ticksParam = Utils.getQueryAsString("ticks");
            if (ticksParam !== undefined) {
                options.ticksPerAltar = parseInt(ticksParam, 10);
                isCustomConfig = isCustomConfig || options.ticksPerAltar !== GameState.TICKS_PER_ALTAR;
            }

            var maxReachParam = Utils.getQueryAsString("maxreachdist");
            if (maxReachParam !== undefined) {
                options.maxReachDistance = parseInt(maxReachParam, 10);
                isCustomConfig = isCustomConfig || options.maxReachDistance !== 10;
            }

            var latencyParam = Utils.getQueryAsString("latency");
            if (latencyParam != null)
                options.latency = parseInt(latencyParam, 10);

            if (isCustomConfig) {
                $("#gamesContainer").hide();
                options.showSave = false;
            }

            @if (Model.GopControls != null)
            {
            <text>
            options.gopControls = JSON.parse('@Html.Raw(Model.GopControls)');
            </text>
            }

            gopui = new GopUI($("#game"), options);

            gopui.viewModel.run.subscribe(function (value) {
                if (!multiViewModel.gameParamsUpdating)
                    hub.server.sendRun(value);
            });

            gopui.viewModel.repel.subscribe(function (value) {
                if (!multiViewModel.gameParamsUpdating)
                    hub.server.sendRepel(value);
            });

            gopui.viewModel.setCurrentAction = function (action, user) {
                var copy = action.copy();
                copy.toggleRun = false;
                copy.changeWand = false;
                gopui.viewModel.currentAction = copy;
                hub.server.sendAction(copy.toString());
            };

            gopui.paint = function (timestamp) {
                if (multiViewModel.startState() === StartState.STARTED) {
                    gopui.gopCanvas.tickProgress = Math.min((timestamp - gopui.lastTick) / gopui.options.tickInterval, 1);
                } else {
                    gopui.gopCanvas.tickProgress = 0;
                    gopui.lastTick = 0;
                }

                gopui.gopCanvas.paint();
                if (multiViewModel.startState() !== StartState.ENDED && gopui.gameState.currentTick >= GameState.TICKS_PER_ALTAR) {
                    multiViewModel.startState(StartState.ENDED);
                    hub.server.sendStopSignal(false);
                }
                gopui.animationHandle = requestAnimationFrame(gopui.paint);
                lastTimestamp = timestamp;
                gopui.updatePointer();
            };

            gopui.onclick = function (p) {
                if (multiViewModel.startState() === StartState.STOPPED) {
                    hub.server.setPlayerLocation(p.x, p.y);
                    return false;
                }
                return true;
            };

            gopui.onMinusTicksClicked = function () {
                if (connectionStarted)
                    hub.server.sendMinusTicks();
            };

            gopui.onPlusTicksClicked = function () {
                if (connectionStarted)
                    hub.server.sendPlusTicks();
            };

            $("#gop-saveGameButton").click(function () {
                if (connectionStarted) {
                    var initialData = gopui.viewModel.initialData();
                    var actions = gopui.viewModel.actions();

                    var filteredInitialData = initialData;
                    filteredInitialData.players = initialData.players.filter(function (p, i) {
                        return !multiViewModel.players()[i] || !multiViewModel.players()[i].isWatching;
                    });

                    var filteredActions = actions.filter(function (p, i) {
                        return !multiViewModel.players()[i] || !multiViewModel.players()[i].isWatching;
                    });

                    var code = Utils.formatGameCode({ initialData: filteredInitialData, actions: filteredActions });
                    hub.server.sendSaveRequest(code, gopui.gameState.score);
                }
            });

            $(gamesContainer).on("click", "[data-code]", function () {
                window.open("Solo?code=" + $(this).data("code"));
            });

            hub.client.setPlayerIndex = function (index) {
                multiViewModel.playerIndex(index);
                gopui.player = gopui.gameState.players[index];
                gopui.gopCanvas.player = gopui.gameState.players[index];
            };

            hub.client.setGameParams = function (params) {
                multiViewModel.gameParamsUpdating = true;
                multiViewModel.altar(params.altar);
                multiViewModel.seed(params.seed);
                multiViewModel.gameParamsUpdating = false;
                gopui.restartGame();
            };

            hub.client.receiveMinusTicks = function () {
                var tickToLoad = gopui.gameState.currentTick - gopui.options.plusMinusTicksAdvance;
                gopui.restartGame(true, multiViewModel.playerIndex());

                for (var i = 0; i < tickToLoad; i++)
                    gopui.tick();

                // Send current run/repel state
                hub.server.sendRun(gopui.player.run);
                hub.server.sendRepel(gopui.player.repel);
            }

            hub.client.receivePlusTicks = function () {
                for (var i = 0; i < gopui.options.plusMinusTicksAdvance; i++)
                    gopui.tick();

                // Send current run/repel state
                hub.server.sendRun(gopui.player.run);
                hub.server.sendRepel(gopui.player.repel);
            }

            hub.client.rejectPlayer = function (players) {
                $("#multiplayerInterface, #game").hide();
                $("#sorry")
                    .text("Sorry, " + players.map(function (p) { return p.username; }).join(players.length === 2 ? " and " : ", ") + (players.length === 1 ? " is" : " are") + " currently playing a game. You will be joined automatically when the game has ended.")
                    .show();
            };

            hub.client.removePlayer = function (index) {
                multiViewModel.players.splice(index, 1);
                gopui.gameState.players.splice(index, 1);
            };

            hub.client.updatePlayers = function (players, playerArrayModified) {
                if (playerArrayModified) {
                    gopui.gameState.players = players.map(function (player, index) {
                        return new Player(gopui.gameState, startingPositions[index], index);
                    });
                }
                multiViewModel.players(players);
                var currentPlayer = players[multiViewModel.playerIndex()];
                if (currentPlayer && (!currentPlayer.started && !currentPlayer.isWatching))
                    multiViewModel.startState(StartState.STOPPED);
            };

            // Called to update what is shown in the save button.
            hub.client.notifySaved = function (data) {
                gopui.viewModel.saved(true);
                gameListViewModel.games.unshift(data);
            };

            // Only called before game is started
            hub.client.setPlayerStartLocation = function (index, x, y) {
                gopui.gameState.players[index].location = new Point(x, y);
            };

            hub.client.start = function () {
                gopui.restartGame();
            };

            hub.client.stop = function () {
                multiViewModel.startState(StartState.STOPPED);
                gopui.restartGame();
            };

            hub.client.gameEnded = function () {
                multiViewModel.startState(StartState.ENDED);
            };

            hub.client.notifyRejoin = function () {
                hub.server.addPlayer();
                $("#multiplayerInterface, #game").show();
                $("#sorry").hide();
            };

            hub.client.countdown = function (t) {
                multiViewModel.startState(StartState.STARTED + t - 1);
            };

            hub.client.tick = function (players) {
                multiViewModel.startState(StartState.STARTED);
                multiViewModel.players(players);
                gopui.viewModel.currentTick(gopui.gameState.currentTick);
                var actions = gopui.viewModel.actions();

                gopui.gameState.players.forEach(function (player, i) {
                    if (actions[i] === undefined)
                        actions[i] = [];
                    if (players[i] === undefined) {
                        // Player got removed
                        return;
                    }

                    if (players[i].action !== null) {
                        player.action = GameAction.parse(players[i].action);
                        // Remove actions past this point.
                        actions[i] = actions[i].slice(0, gopui.gameState.currentTick);
                    }

                    if (actions[i].length <= gopui.gameState.currentTick) {
                        // Update client run and repel state if not replaying from code
                        player.action.toggleRun = player.run != players[i].run;
                        player.action.changeWand = player.repel != players[i].repel;
                    }
                });

                gopui.viewModel.actions.valueHasMutated();

                multiViewModel.gameParamsUpdating = true;
                gopui.tick();
                multiViewModel.gameParamsUpdating = false;

                // TODO

                if (actions[gopui.player.index].length > gopui.gameState.currentTick) {
                    // Send it to hub if playing from code and is current player
                    hub.server.sendRun(gopui.player.run);
                    hub.server.sendRepel(gopui.player.repel);
                }

                gopui.lastTick = lastTimestamp;
                gopui.gopCanvas.tickProgress = 0;
            };

            $.ajaxSetup({ cache: false });

            $(function () {
                ko.applyBindings(multiViewModel, $("#multiplayerInterface")[0]);
                ko.applyBindings(gameListViewModel, $("#gamesContainer")[0]);

                $.connection.hub.start().done(function () { connectionStarted = true; });

                $.getJSON("MultiplayerHandler.ashx", function (data) {
                    gameListViewModel.games(data);
                });
            });
        })();
    </script>
}
